/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/feedbacks': {
    get: {
      responses: {
        /** @description Get feedback object */
        200: {
          content: {
            'application/json': {
              id: string;
              action_id: string;
              feedback_required: boolean;
            }[];
          };
        };
        /** @description Server error */
        500: {
          content: never;
        };
      };
    };
    post: {
      requestBody?: {
        content: {
          'application/json': {
            taskId: string;
            actionId: string;
            steps: {
              id: string;
              correction?: unknown;
              score?: number | null;
            }[];
          }[];
        };
      };
      responses: {
        /** @description Feedback provided by user */
        200: {
          content: {
            'application/json': {
              message: string;
            };
          };
        };
        /** @description Server error */
        500: {
          content: never;
        };
      };
    };
  };
  '/sessions/actions/bulk': {
    /** @description Bulk logs actions with task and session */
    post: {
      requestBody?: {
        content: {
          'application/json': {
            taskId: string;
            taskName: string;
            taskStartedAt?: string | null;
            id: string;
            startedAt?: string | null;
            endedAt?: string | null;
            autoTrace?: boolean | null;
          }[];
        };
      };
      responses: {
        /** @description Actions logged */
        201: {
          content: never;
        };
        /** @description Server error */
        500: {
          content: never;
        };
      };
    };
  };
  '/sessions/actions/{actionId}/score': {
    /** @description Add score to action */
    patch: {
      parameters: {
        path: {
          actionId: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': {
            score: number | null;
          };
        };
      };
      responses: {
        /** @description Action scored */
        201: {
          content: never;
        };
        /** @description Server error */
        500: {
          content: never;
        };
      };
    };
  };
  '/sessions/actions/{actionId}': {
    /** @description Get action with problems for feedback */
    get: {
      parameters: {
        path: {
          actionId: string;
        };
      };
      responses: {
        /** @description Action with problem */
        200: {
          content: {
            'application/json': {
              id: string;
              a_id: string | null;
              name: string | null;
              app_version: string | null;
              environment_id: string;
              task_id: string | null;
              meta?: {
                auto_trace?: boolean | null;
              } | null;
              feedback?: unknown;
              request: string | null;
              response: string | null;
              is_empty: boolean | null;
              running_cost: string | null;
              evaluation_cost: string | null;
              average_running_cost: string | null;
              average_evaluation_cost: string | null;
              duration: number | null;
              started_at: string | null;
              ended_at: string | null;
              created_at: string;
              updated_at: string;
              status: number[];
              steps: {
                id: string;
                a_id: string | null;
                action_id: string | null;
                environment_id: string;
                pos: number | null;
                level: number | null;
                input: string | null;
                output: string | null;
                actual_input: string | null;
                actual_output: string | null;
                correction?: unknown;
                score: string | null;
                history?:
                  | {
                      score?: string | null;
                      correction?: string | null;
                    }[]
                  | null;
                model: string | null;
                provider: string | null;
                temperature: string | null;
                meta: {
                  description?: string | null;
                  http?: {
                    url?: string | null;
                    status_code?: number | null;
                  } | null;
                } | null;
                trace_id: string | null;
                span_id: string | null;
                parent_span_id: string | null;
                name: string | null;
                type: string | null;
                kind: string | null;
                workflow_id: string | null;
                task_id: string | null;
                agent_id: string | null;
                tool_id: string | null;
                is_streaming: boolean | null;
                is_llm: boolean | null;
                prompt_key: string | null;
                prompt_version: string | null;
                prompt_name: string | null;
                prompt_hash: string | null;
                prompt_template_variables?: unknown;
                is_empty: boolean | null;
                status: number | null;
                feedback_status: number | null;
                error_description: string | null;
                running_cost: string | null;
                evaluation_cost: string | null;
                duration: number | null;
                started_at: string | null;
                ended_at: string | null;
                created_at: string;
                updated_at: string;
              }[];
            };
          };
        };
        /** @description Server error */
        500: {
          content: never;
        };
      };
    };
  };
  '/sessions/tasks/{taskId}': {
    /** @description Update task */
    post: {
      parameters: {
        path: {
          taskId: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': {
            endedAt?: string | null;
          };
        };
      };
      responses: {
        /** @description Task updated */
        200: {
          content: never;
        };
        /** @description Server error */
        500: {
          content: never;
        };
      };
    };
  };
  '/sessions/users/alias': {
    /** @description Alias user */
    post: {
      requestBody?: {
        content: {
          'application/json': {
            id: string;
            alias_id: string;
          };
        };
      };
      responses: {
        /** @description User aliased */
        200: {
          content: {
            'application/json': {
              id: string;
              environment_id: string;
              u_id: string | null;
              a_id: string | null;
              meta?: {
                ua?: string | null;
                'ua-mobile'?: string | null;
                'ua-platform'?: string | null;
                'user-agent'?: string | null;
                city?: string | null;
                region?: string | null;
                regionCode?: string | null;
                postalCode?: string | null;
                country?: string | null;
                continent?: string | null;
                timezone?: string | null;
                latitude?: string | null;
                longitude?: string | null;
              } | null;
              last_visit: string;
              created_at: string;
              updated_at: string;
            };
          };
        };
        /** @description Server error */
        500: {
          content: never;
        };
      };
    };
  };
  '/sessions/users/identify': {
    /** @description Identify user */
    post: {
      requestBody?: {
        content: {
          'application/json': {
            id: string;
            meta?: unknown;
          };
        };
      };
      responses: {
        /** @description User aliased */
        200: {
          content: {
            'application/json': {
              id: string;
              environment_id: string;
              u_id: string | null;
              a_id: string | null;
              meta?: {
                ua?: string | null;
                'ua-mobile'?: string | null;
                'ua-platform'?: string | null;
                'user-agent'?: string | null;
                city?: string | null;
                region?: string | null;
                regionCode?: string | null;
                postalCode?: string | null;
                country?: string | null;
                continent?: string | null;
                timezone?: string | null;
                latitude?: string | null;
                longitude?: string | null;
              } | null;
              last_visit: string;
              created_at: string;
              updated_at: string;
            };
          };
        };
        /** @description Server error */
        500: {
          content: never;
        };
      };
    };
  };
  '/sessions/sessions': {
    /** @description Update session end time */
    patch: {
      responses: {
        /** @description Session updated */
        200: {
          content: never;
        };
        /** @description Server error */
        500: {
          content: never;
        };
      };
    };
  };
  '/sessions': {
    /**
     * @description
     *     Generate session based cookie/token for user to track AI integration and provide feedback.
     *     By default, an anonimous user is created until application explicitly alias user to identified user.
     */
    post: {
      requestBody?: {
        content: {
          'application/json': {
            clientToken: string;
            anonimousId?: string | null;
          };
        };
      };
      responses: {
        /** @description Session created */
        200: {
          content: {
            'application/json': {
              id: string;
              sessionId: string;
              token: string;
            };
          };
        };
        /** @description Server error */
        500: {
          content: never;
        };
      };
    };
  };
  '/webhooks/guardrails': {
    post: {
      requestBody?: {
        content: {
          'application/json': {
            step_id: string;
            category: number;
            evaluation: {
              score?: unknown;
              reason: string;
              success: boolean;
              verdicts?: unknown;
              statements?: unknown;
              opinions?: unknown;
              truths?: unknown;
              claims?: unknown;
              metadata: {
                model_name: string;
                completion_tokens?: number | null;
                prompt_tokens?: number | null;
                total_tokens?: number | null;
              };
            };
          };
        };
      };
      responses: {
        /** @description Message */
        200: {
          content: never;
        };
        /** @description Server error */
        500: {
          content: never;
        };
      };
    };
  };
  '/webhooks/validation-checks': {
    post: {
      requestBody?: {
        content: {
          'application/json': {
            check_job_id: string;
            output?: unknown;
            metadata: {
              model_name: string;
              completion_tokens?: number | null;
              prompt_tokens?: number | null;
              total_tokens?: number | null;
            };
            results?:
              | {
                  category: number;
                  meta?: unknown;
                  score?: number | null;
                  reason?: string | null;
                  success?: boolean | null;
                  metadata: {
                    model_name: string;
                    completion_tokens?: number | null;
                    prompt_tokens?: number | null;
                    total_tokens?: number | null;
                  };
                }[]
              | null;
          };
        };
      };
      responses: {
        /** @description Check */
        200: {
          content: never;
        };
        /** @description Server error */
        500: {
          content: never;
        };
      };
    };
  };
  '/v1/client/feedbacks': {
    get: {
      responses: {
        /** @description Get feedback object */
        200: {
          content: {
            'application/json': {
              id: string;
              action_id: string;
              feedback_required: boolean;
            }[];
          };
        };
        /** @description Server error */
        500: {
          content: never;
        };
      };
    };
    post: {
      requestBody?: {
        content: {
          'application/json': {
            taskId: string;
            actionId: string;
            steps: {
              id: string;
              correction?: unknown;
              score?: number | null;
            }[];
          }[];
        };
      };
      responses: {
        /** @description Feedback provided by user */
        200: {
          content: {
            'application/json': {
              message: string;
            };
          };
        };
        /** @description Server error */
        500: {
          content: never;
        };
      };
    };
  };
  '/v1/client/sessions/actions/bulk': {
    /** @description Bulk logs actions with task and session */
    post: {
      requestBody?: {
        content: {
          'application/json': {
            taskId: string;
            taskName: string;
            taskStartedAt?: string | null;
            id: string;
            startedAt?: string | null;
            endedAt?: string | null;
            autoTrace?: boolean | null;
          }[];
        };
      };
      responses: {
        /** @description Actions logged */
        201: {
          content: never;
        };
        /** @description Server error */
        500: {
          content: never;
        };
      };
    };
  };
  '/v1/client/sessions/actions/{actionId}/score': {
    /** @description Add score to action */
    patch: {
      parameters: {
        path: {
          actionId: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': {
            score: number | null;
          };
        };
      };
      responses: {
        /** @description Action scored */
        201: {
          content: never;
        };
        /** @description Server error */
        500: {
          content: never;
        };
      };
    };
  };
  '/v1/client/sessions/actions/{actionId}': {
    /** @description Get action with problems for feedback */
    get: {
      parameters: {
        path: {
          actionId: string;
        };
      };
      responses: {
        /** @description Action with problem */
        200: {
          content: {
            'application/json': {
              id: string;
              a_id: string | null;
              name: string | null;
              app_version: string | null;
              environment_id: string;
              task_id: string | null;
              meta?: {
                auto_trace?: boolean | null;
              } | null;
              feedback?: unknown;
              request: string | null;
              response: string | null;
              is_empty: boolean | null;
              running_cost: string | null;
              evaluation_cost: string | null;
              average_running_cost: string | null;
              average_evaluation_cost: string | null;
              duration: number | null;
              started_at: string | null;
              ended_at: string | null;
              created_at: string;
              updated_at: string;
              status: number[];
              steps: {
                id: string;
                a_id: string | null;
                action_id: string | null;
                environment_id: string;
                pos: number | null;
                level: number | null;
                input: string | null;
                output: string | null;
                actual_input: string | null;
                actual_output: string | null;
                correction?: unknown;
                score: string | null;
                history?:
                  | {
                      score?: string | null;
                      correction?: string | null;
                    }[]
                  | null;
                model: string | null;
                provider: string | null;
                temperature: string | null;
                meta: {
                  description?: string | null;
                  http?: {
                    url?: string | null;
                    status_code?: number | null;
                  } | null;
                } | null;
                trace_id: string | null;
                span_id: string | null;
                parent_span_id: string | null;
                name: string | null;
                type: string | null;
                kind: string | null;
                workflow_id: string | null;
                task_id: string | null;
                agent_id: string | null;
                tool_id: string | null;
                is_streaming: boolean | null;
                is_llm: boolean | null;
                prompt_key: string | null;
                prompt_version: string | null;
                prompt_name: string | null;
                prompt_hash: string | null;
                prompt_template_variables?: unknown;
                is_empty: boolean | null;
                status: number | null;
                feedback_status: number | null;
                error_description: string | null;
                running_cost: string | null;
                evaluation_cost: string | null;
                duration: number | null;
                started_at: string | null;
                ended_at: string | null;
                created_at: string;
                updated_at: string;
              }[];
            };
          };
        };
        /** @description Server error */
        500: {
          content: never;
        };
      };
    };
  };
  '/v1/client/sessions/tasks/{taskId}': {
    /** @description Update task */
    post: {
      parameters: {
        path: {
          taskId: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': {
            endedAt?: string | null;
          };
        };
      };
      responses: {
        /** @description Task updated */
        200: {
          content: never;
        };
        /** @description Server error */
        500: {
          content: never;
        };
      };
    };
  };
  '/v1/client/sessions/users/alias': {
    /** @description Alias user */
    post: {
      requestBody?: {
        content: {
          'application/json': {
            id: string;
            alias_id: string;
          };
        };
      };
      responses: {
        /** @description User aliased */
        200: {
          content: {
            'application/json': {
              id: string;
              environment_id: string;
              u_id: string | null;
              a_id: string | null;
              meta?: {
                ua?: string | null;
                'ua-mobile'?: string | null;
                'ua-platform'?: string | null;
                'user-agent'?: string | null;
                city?: string | null;
                region?: string | null;
                regionCode?: string | null;
                postalCode?: string | null;
                country?: string | null;
                continent?: string | null;
                timezone?: string | null;
                latitude?: string | null;
                longitude?: string | null;
              } | null;
              last_visit: string;
              created_at: string;
              updated_at: string;
            };
          };
        };
        /** @description Server error */
        500: {
          content: never;
        };
      };
    };
  };
  '/v1/client/sessions/users/identify': {
    /** @description Identify user */
    post: {
      requestBody?: {
        content: {
          'application/json': {
            id: string;
            meta?: unknown;
          };
        };
      };
      responses: {
        /** @description User aliased */
        200: {
          content: {
            'application/json': {
              id: string;
              environment_id: string;
              u_id: string | null;
              a_id: string | null;
              meta?: {
                ua?: string | null;
                'ua-mobile'?: string | null;
                'ua-platform'?: string | null;
                'user-agent'?: string | null;
                city?: string | null;
                region?: string | null;
                regionCode?: string | null;
                postalCode?: string | null;
                country?: string | null;
                continent?: string | null;
                timezone?: string | null;
                latitude?: string | null;
                longitude?: string | null;
              } | null;
              last_visit: string;
              created_at: string;
              updated_at: string;
            };
          };
        };
        /** @description Server error */
        500: {
          content: never;
        };
      };
    };
  };
  '/v1/client/sessions/sessions': {
    /** @description Update session end time */
    patch: {
      responses: {
        /** @description Session updated */
        200: {
          content: never;
        };
        /** @description Server error */
        500: {
          content: never;
        };
      };
    };
  };
  '/v1/client/sessions': {
    /**
     * @description
     *     Generate session based cookie/token for user to track AI integration and provide feedback.
     *     By default, an anonimous user is created until application explicitly alias user to identified user.
     */
    post: {
      requestBody?: {
        content: {
          'application/json': {
            clientToken: string;
            anonimousId?: string | null;
          };
        };
      };
      responses: {
        /** @description Session created */
        200: {
          content: {
            'application/json': {
              id: string;
              sessionId: string;
              token: string;
            };
          };
        };
        /** @description Server error */
        500: {
          content: never;
        };
      };
    };
  };
  '/v1/client/webhooks/guardrails': {
    post: {
      requestBody?: {
        content: {
          'application/json': {
            step_id: string;
            category: number;
            evaluation: {
              score?: unknown;
              reason: string;
              success: boolean;
              verdicts?: unknown;
              statements?: unknown;
              opinions?: unknown;
              truths?: unknown;
              claims?: unknown;
              metadata: {
                model_name: string;
                completion_tokens?: number | null;
                prompt_tokens?: number | null;
                total_tokens?: number | null;
              };
            };
          };
        };
      };
      responses: {
        /** @description Message */
        200: {
          content: never;
        };
        /** @description Server error */
        500: {
          content: never;
        };
      };
    };
  };
  '/v1/client/webhooks/validation-checks': {
    post: {
      requestBody?: {
        content: {
          'application/json': {
            check_job_id: string;
            output?: unknown;
            metadata: {
              model_name: string;
              completion_tokens?: number | null;
              prompt_tokens?: number | null;
              total_tokens?: number | null;
            };
            results?:
              | {
                  category: number;
                  meta?: unknown;
                  score?: number | null;
                  reason?: string | null;
                  success?: boolean | null;
                  metadata: {
                    model_name: string;
                    completion_tokens?: number | null;
                    prompt_tokens?: number | null;
                    total_tokens?: number | null;
                  };
                }[]
              | null;
          };
        };
      };
      responses: {
        /** @description Check */
        200: {
          content: never;
        };
        /** @description Server error */
        500: {
          content: never;
        };
      };
    };
  };
  '/v1/traces': {
    /**
     * @description
     *     Generate session based cookie/token for user to track AI integration and provide feedback.
     *     By default, an anonimous user is created until application explicitly alias user to identified user.
     */
    post: {
      requestBody?: {
        content: {
          'application/json': unknown;
        };
      };
      responses: {
        /** @description Session created */
        200: {
          content: {
            'application/json': {
              message: string;
            };
          };
        };
        /** @description Server error */
        500: {
          content: never;
        };
      };
    };
  };
  '/v1/agiflow/actions/{id}/score': {
    /**
     * @description
     *     Report score for action.
     */
    patch: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': {
            score: number | null;
          };
        };
      };
      responses: {
        /** @description Updated */
        200: {
          content: {
            'application/json': {
              message: string;
            };
          };
        };
        /** @description Server error */
        500: {
          content: never;
        };
      };
    };
  };
  '/v1/agiflow/steps/{id}': {
    /**
     * @description
     *     Update step.
     */
    patch: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': {
            input?: unknown;
            output?: unknown;
          };
        };
      };
      responses: {
        /** @description Updated */
        200: {
          content: {
            'application/json': {
              message: string;
            };
          };
        };
        /** @description Server error */
        500: {
          content: never;
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {};
  responses: never;
  parameters: {};
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
