/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/auth/logout': {
    delete: {
      responses: {
        /** @description Sign out user */
        202: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/auth/callback': {
    /** @description Verify github authentication and create user authentication session */
    get: {
      parameters: {
        query: {
          code: string;
        };
      };
      responses: {
        /** @description Redirect to page */
        301: {
          content: never;
        };
        /** @description Invalid Request */
        400: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/projects/{projectId}/environments/{environmentId}/actions/count': {
    get: {
      parameters: {
        query?: {
          limit?: number | null;
          name?: string | null;
        };
        path: {
          environmentId: string;
          projectId: string;
          organizationId: string;
        };
      };
      responses: {
        /** @description Action */
        200: {
          content: {
            'application/json': {
              total: number;
              totalPage: number;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/projects/{projectId}/environments/{environmentId}/actions': {
    get: {
      parameters: {
        query?: {
          limit?: number | null;
          page?: number | null;
          name?: string | null;
        };
        path: {
          environmentId: string;
          projectId: string;
          organizationId: string;
        };
      };
      responses: {
        /** @description List actions */
        200: {
          content: {
            'application/json': {
              list: {
                id: string;
                a_id: string | null;
                name?: string | null;
                app_version: string | null;
                environment_id: string;
                task_id: string | null;
                meta?: {
                  auto_trace?: boolean | null;
                } | null;
                feedback?: unknown;
                request: string | null;
                response: string | null;
                is_empty: boolean | null;
                running_cost: string | null;
                evaluation_cost: string | null;
                average_running_cost: string | null;
                average_evaluation_cost: string | null;
                duration: number | null;
                started_at: string | null;
                ended_at: string | null;
                created_at: string;
                updated_at: string;
                status: number[];
                feedback_required: boolean;
                input?: string | null;
                output?: string | null;
                steps: {
                  id: string;
                  a_id: string | null;
                  action_id: string | null;
                  environment_id: string;
                  pos: number | null;
                  level: number | null;
                  input: string | null;
                  output: string | null;
                  actual_input: string | null;
                  actual_output: string | null;
                  correction?: unknown;
                  score: string | null;
                  history?:
                    | {
                        score?: string | null;
                        correction?: string | null;
                      }[]
                    | null;
                  model: string | null;
                  provider: string | null;
                  temperature: string | null;
                  meta: {
                    description?: string | null;
                    http?: {
                      url?: string | null;
                      status_code?: number | null;
                    } | null;
                  } | null;
                  trace_id: string | null;
                  span_id: string | null;
                  parent_span_id: string | null;
                  name: string | null;
                  type: string | null;
                  kind: string | null;
                  workflow_id: string | null;
                  task_id: string | null;
                  agent_id: string | null;
                  tool_id: string | null;
                  is_streaming: boolean | null;
                  is_llm: boolean | null;
                  prompt_key: string | null;
                  prompt_version: string | null;
                  prompt_name: string | null;
                  prompt_hash: string | null;
                  prompt_template_variables?: unknown;
                  is_empty: boolean | null;
                  status: number | null;
                  feedback_status: number | null;
                  error_description: string | null;
                  running_cost: string | null;
                  evaluation_cost: string | null;
                  duration: number | null;
                  started_at: string | null;
                  ended_at: string | null;
                  created_at: string;
                  updated_at: string;
                  evaluations: {
                    id: string;
                    step_id: string | null;
                    category: number | null;
                    hook: string | null;
                    score: string | null;
                    corrected_score: string | null;
                    corrected_reason: string | null;
                    reason: string | null;
                    success: boolean | null;
                    is_problematic: boolean | null;
                    verdicts?: unknown;
                    statements?: unknown;
                    opinions?: unknown;
                    truths?: unknown;
                    claims?: unknown;
                    started_at: string | null;
                    ended_at: string | null;
                    created_at: string;
                    updated_at: string;
                  }[];
                }[];
              }[];
              meta: {
                limit: number;
              };
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/projects/{projectId}/environments/{environmentId}/actions/{actionId}': {
    get: {
      parameters: {
        path: {
          environmentId: string;
          projectId: string;
          organizationId: string;
          actionId: string;
        };
      };
      responses: {
        /** @description Action */
        200: {
          content: {
            'application/json': {
              id: string;
              a_id: string | null;
              name?: string | null;
              app_version: string | null;
              environment_id: string;
              task_id: string | null;
              meta?: {
                auto_trace?: boolean | null;
              } | null;
              feedback?: unknown;
              request: string | null;
              response: string | null;
              is_empty: boolean | null;
              running_cost: string | null;
              evaluation_cost: string | null;
              average_running_cost: string | null;
              average_evaluation_cost: string | null;
              duration: number | null;
              started_at: string | null;
              ended_at: string | null;
              created_at: string;
              updated_at: string;
              steps: {
                id: string;
                a_id: string | null;
                action_id: string | null;
                environment_id: string;
                pos: number | null;
                level: number | null;
                input: string | null;
                output: string | null;
                actual_input: string | null;
                actual_output: string | null;
                correction?: unknown;
                score: string | null;
                history?:
                  | {
                      score?: string | null;
                      correction?: string | null;
                    }[]
                  | null;
                model: string | null;
                provider: string | null;
                temperature: string | null;
                meta: {
                  description?: string | null;
                  http?: {
                    url?: string | null;
                    status_code?: number | null;
                  } | null;
                } | null;
                trace_id: string | null;
                span_id: string | null;
                parent_span_id: string | null;
                name: string | null;
                type: string | null;
                kind: string | null;
                workflow_id: string | null;
                task_id: string | null;
                agent_id: string | null;
                tool_id: string | null;
                is_streaming: boolean | null;
                is_llm: boolean | null;
                prompt_key: string | null;
                prompt_version: string | null;
                prompt_name: string | null;
                prompt_hash: string | null;
                prompt_template_variables?: unknown;
                is_empty: boolean | null;
                status: number | null;
                feedback_status: number | null;
                error_description: string | null;
                running_cost: string | null;
                evaluation_cost: string | null;
                duration: number | null;
                started_at: string | null;
                ended_at: string | null;
                created_at: string;
                updated_at: string;
                evaluations: {
                  id: string;
                  step_id: string | null;
                  category: number | null;
                  hook: string | null;
                  score: string | null;
                  corrected_score: string | null;
                  corrected_reason: string | null;
                  reason: string | null;
                  success: boolean | null;
                  is_problematic: boolean | null;
                  verdicts?: unknown;
                  statements?: unknown;
                  opinions?: unknown;
                  truths?: unknown;
                  claims?: unknown;
                  started_at: string | null;
                  ended_at: string | null;
                  created_at: string;
                  updated_at: string;
                }[];
                llmUsages: {
                  id: string;
                  environment_id: string | null;
                  evaluation_id: string | null;
                  step_id: string | null;
                  project_id: string | null;
                  check_result_id: string | null;
                  check_job_id: string | null;
                  model: string;
                  openai_api_base: string | null;
                  openai_api_version: string | null;
                  vendor: string;
                  completion_tokens: number | null;
                  prompt_tokens: number | null;
                  total_tokens: number | null;
                  client_provided: boolean | null;
                  estimated_cost: string | null;
                  created_at: string;
                  updated_at: string;
                }[];
              }[];
              task: {
                id: string;
                session_id: string | null;
                environment_id: string;
                status: number | null;
                name: string | null;
                pos: number | null;
                action_count: number | null;
                meta?: unknown;
                started_at: string | null;
                ended_at: string | null;
                created_at: string;
                updated_at: string;
                session: {
                  id: string;
                  environment_id: string;
                  user_id: string | null;
                  meta?: unknown;
                  user_ids: string[] | null;
                  started_at: string | null;
                  ended_at: string | null;
                  created_at: string;
                  updated_at: string;
                  user: {
                    id: string;
                    environment_id: string;
                    u_id: string | null;
                    a_id: string | null;
                    meta?: {
                      ua?: string | null;
                      'ua-mobile'?: string | null;
                      'ua-platform'?: string | null;
                      'user-agent'?: string | null;
                      city?: string | null;
                      region?: string | null;
                      regionCode?: string | null;
                      postalCode?: string | null;
                      country?: string | null;
                      continent?: string | null;
                      timezone?: string | null;
                      latitude?: string | null;
                      longitude?: string | null;
                    } | null;
                    last_visit: string;
                    created_at: string;
                    updated_at: string;
                  };
                };
              };
              status: number[];
              feedback_required: boolean;
              input?: string | null;
              output?: string | null;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Action not found */
        404: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/projects/{projectId}/environments/{environmentId}/tasks/summary': {
    get: {
      parameters: {
        query?: {
          fromDate?: string | null;
          toDate?: string | null;
        };
        path: {
          environmentId: string;
          projectId: string;
          organizationId: string;
        };
      };
      responses: {
        /** @description Task */
        200: {
          content: {
            'application/json': {
              total: number;
              requiredInputCount: number;
              inReviewCount: number;
              fixedCount: number;
              incompleteCount: number;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/projects/{projectId}/environments/{environmentId}/tasks/count': {
    get: {
      parameters: {
        query?: {
          group1?: unknown;
          group2?: unknown;
          group3?: unknown;
          limit?: number | null;
        };
        path: {
          environmentId: string;
          projectId: string;
          organizationId: string;
        };
      };
      responses: {
        /** @description Task Counts */
        200: {
          content: {
            'application/json': {
              group1: {
                /** @default 10 */
                limit?: number | null;
                /** @default 1 */
                page?: number | null;
              };
              group2: {
                /** @default 10 */
                limit?: number | null;
                /** @default 1 */
                page?: number | null;
              };
              group3: {
                /** @default 10 */
                limit?: number | null;
                /** @default 1 */
                page?: number | null;
              };
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/projects/{projectId}/environments/{environmentId}/tasks': {
    get: {
      parameters: {
        query?: {
          limit?: number | null;
          page?: number | null;
          statuses?: unknown;
        };
        path: {
          environmentId: string;
          projectId: string;
          organizationId: string;
        };
      };
      responses: {
        /** @description List tasks based on status */
        200: {
          content: {
            'application/json': {
              list: {
                id: string;
                session_id: string | null;
                environment_id: string;
                status: number | null;
                name: string | null;
                pos: number | null;
                action_count: number | null;
                meta?: unknown;
                started_at: string | null;
                ended_at: string | null;
                created_at: string;
                updated_at: string;
                actions: {
                  id: string;
                  a_id: string | null;
                  name: string | null;
                  app_version: string | null;
                  environment_id: string;
                  task_id: string | null;
                  meta?: {
                    auto_trace?: boolean | null;
                  } | null;
                  feedback?: unknown;
                  request: string | null;
                  response: string | null;
                  is_empty: boolean | null;
                  running_cost: string | null;
                  evaluation_cost: string | null;
                  average_running_cost: string | null;
                  average_evaluation_cost: string | null;
                  duration: number | null;
                  started_at: string | null;
                  ended_at: string | null;
                  created_at: string;
                  updated_at: string;
                  status: number[];
                  input?: string | null;
                  output?: string | null;
                  feedback_required: boolean;
                  parentSteps: {
                    id: string;
                    a_id: string | null;
                    action_id: string | null;
                    environment_id: string;
                    pos: number | null;
                    level: number | null;
                    input: string | null;
                    output: string | null;
                    actual_input: string | null;
                    actual_output: string | null;
                    correction?: unknown;
                    score: string | null;
                    history?:
                      | {
                          score?: string | null;
                          correction?: string | null;
                        }[]
                      | null;
                    model: string | null;
                    provider: string | null;
                    temperature: string | null;
                    meta: {
                      description?: string | null;
                      http?: {
                        url?: string | null;
                        status_code?: number | null;
                      } | null;
                    } | null;
                    trace_id: string | null;
                    span_id: string | null;
                    parent_span_id: string | null;
                    name: string | null;
                    type: string | null;
                    kind: string | null;
                    workflow_id: string | null;
                    task_id: string | null;
                    agent_id: string | null;
                    tool_id: string | null;
                    is_streaming: boolean | null;
                    is_llm: boolean | null;
                    prompt_key: string | null;
                    prompt_version: string | null;
                    prompt_name: string | null;
                    prompt_hash: string | null;
                    prompt_template_variables?: unknown;
                    is_empty: boolean | null;
                    status: number | null;
                    feedback_status: number | null;
                    error_description: string | null;
                    running_cost: string | null;
                    evaluation_cost: string | null;
                    duration: number | null;
                    started_at: string | null;
                    ended_at: string | null;
                    created_at: string;
                    updated_at: string;
                  }[];
                  steps: {
                    id: string;
                    a_id: string | null;
                    action_id: string | null;
                    environment_id: string;
                    pos: number | null;
                    level: number | null;
                    input: string | null;
                    output: string | null;
                    actual_input: string | null;
                    actual_output: string | null;
                    correction?: unknown;
                    score: string | null;
                    history?:
                      | {
                          score?: string | null;
                          correction?: string | null;
                        }[]
                      | null;
                    model: string | null;
                    provider: string | null;
                    temperature: string | null;
                    meta: {
                      description?: string | null;
                      http?: {
                        url?: string | null;
                        status_code?: number | null;
                      } | null;
                    } | null;
                    trace_id: string | null;
                    span_id: string | null;
                    parent_span_id: string | null;
                    name: string | null;
                    type: string | null;
                    kind: string | null;
                    workflow_id: string | null;
                    task_id: string | null;
                    agent_id: string | null;
                    tool_id: string | null;
                    is_streaming: boolean | null;
                    is_llm: boolean | null;
                    prompt_key: string | null;
                    prompt_version: string | null;
                    prompt_name: string | null;
                    prompt_hash: string | null;
                    prompt_template_variables?: unknown;
                    is_empty: boolean | null;
                    status: number | null;
                    feedback_status: number | null;
                    error_description: string | null;
                    running_cost: string | null;
                    evaluation_cost: string | null;
                    duration: number | null;
                    started_at: string | null;
                    ended_at: string | null;
                    created_at: string;
                    updated_at: string;
                    evaluations: {
                      id: string;
                      step_id: string | null;
                      category: number | null;
                      hook: string | null;
                      score: string | null;
                      corrected_score: string | null;
                      corrected_reason: string | null;
                      reason: string | null;
                      success: boolean | null;
                      is_problematic: boolean | null;
                      verdicts?: unknown;
                      statements?: unknown;
                      opinions?: unknown;
                      truths?: unknown;
                      claims?: unknown;
                      started_at: string | null;
                      ended_at: string | null;
                      created_at: string;
                      updated_at: string;
                    }[];
                  }[];
                }[];
              }[];
              meta: {
                limit: number;
                currentPage: number;
                totalPage: number;
              };
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/projects/{projectId}/environments/{environmentId}/tasks/{taskId}': {
    get: {
      parameters: {
        path: {
          environmentId: string;
          projectId: string;
          organizationId: string;
          taskId: string;
        };
      };
      responses: {
        /** @description Task */
        200: {
          content: {
            'application/json': {
              id: string;
              session_id: string | null;
              environment_id: string;
              status: number | null;
              name: string | null;
              pos: number | null;
              action_count: number | null;
              meta?: unknown;
              started_at: string | null;
              ended_at: string | null;
              created_at: string;
              updated_at: string;
              session: {
                id: string;
                environment_id: string;
                user_id: string | null;
                meta?: unknown;
                user_ids: string[] | null;
                started_at: string | null;
                ended_at: string | null;
                created_at: string;
                updated_at: string;
              };
              actions: {
                id: string;
                a_id: string | null;
                name: string | null;
                app_version: string | null;
                environment_id: string;
                task_id: string | null;
                meta?: {
                  auto_trace?: boolean | null;
                } | null;
                feedback?: unknown;
                request: string | null;
                response: string | null;
                is_empty: boolean | null;
                running_cost: string | null;
                evaluation_cost: string | null;
                average_running_cost: string | null;
                average_evaluation_cost: string | null;
                duration: number | null;
                started_at: string | null;
                ended_at: string | null;
                created_at: string;
                updated_at: string;
                status: number[];
                input?: string | null;
                output?: string | null;
                feedback_required: boolean;
                steps: {
                  id: string;
                  a_id: string | null;
                  action_id: string | null;
                  environment_id: string;
                  pos: number | null;
                  level: number | null;
                  input: string | null;
                  output: string | null;
                  actual_input: string | null;
                  actual_output: string | null;
                  correction?: unknown;
                  score: string | null;
                  history?:
                    | {
                        score?: string | null;
                        correction?: string | null;
                      }[]
                    | null;
                  model: string | null;
                  provider: string | null;
                  temperature: string | null;
                  meta: {
                    description?: string | null;
                    http?: {
                      url?: string | null;
                      status_code?: number | null;
                    } | null;
                  } | null;
                  trace_id: string | null;
                  span_id: string | null;
                  parent_span_id: string | null;
                  name: string | null;
                  type: string | null;
                  kind: string | null;
                  workflow_id: string | null;
                  task_id: string | null;
                  agent_id: string | null;
                  tool_id: string | null;
                  is_streaming: boolean | null;
                  is_llm: boolean | null;
                  prompt_key: string | null;
                  prompt_version: string | null;
                  prompt_name: string | null;
                  prompt_hash: string | null;
                  prompt_template_variables?: unknown;
                  is_empty: boolean | null;
                  status: number | null;
                  feedback_status: number | null;
                  error_description: string | null;
                  running_cost: string | null;
                  evaluation_cost: string | null;
                  duration: number | null;
                  started_at: string | null;
                  ended_at: string | null;
                  created_at: string;
                  updated_at: string;
                  evaluations: {
                    id: string;
                    step_id: string | null;
                    category: number | null;
                    hook: string | null;
                    score: string | null;
                    corrected_score: string | null;
                    corrected_reason: string | null;
                    reason: string | null;
                    success: boolean | null;
                    is_problematic: boolean | null;
                    verdicts?: unknown;
                    statements?: unknown;
                    opinions?: unknown;
                    truths?: unknown;
                    claims?: unknown;
                    started_at: string | null;
                    ended_at: string | null;
                    created_at: string;
                    updated_at: string;
                  }[];
                }[];
              }[];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
    patch: {
      parameters: {
        path: {
          environmentId: string;
          projectId: string;
          organizationId: string;
          taskId: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': {
            status: number;
          };
        };
      };
      responses: {
        /** @description Task */
        200: {
          content: {
            'application/json': {
              message: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/projects/{projectId}/environments/{environmentId}/users/summary': {
    get: {
      parameters: {
        query?: {
          fromDate?: string | null;
          toDate?: string | null;
        };
        path: {
          environmentId: string;
          projectId: string;
          organizationId: string;
        };
      };
      responses: {
        /** @description Users summary */
        200: {
          content: {
            'application/json': {
              total: number;
              problemsCount: number;
              meta: {
                fromDate?: string | null;
                toDate?: string | null;
              };
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/projects/{projectId}/environments/{environmentId}/users/count': {
    get: {
      parameters: {
        query?: {
          limit?: number | null;
        };
        path: {
          environmentId: string;
          projectId: string;
          organizationId: string;
        };
      };
      responses: {
        /** @description Action */
        200: {
          content: {
            'application/json': {
              total: number;
              totalPage: number;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/projects/{projectId}/environments/{environmentId}/users': {
    get: {
      parameters: {
        query?: {
          limit?: number | null;
          page?: number | null;
        };
        path: {
          environmentId: string;
          projectId: string;
          organizationId: string;
        };
      };
      responses: {
        /** @description User list */
        200: {
          content: {
            'application/json': {
              list: {
                id: string;
                environment_id: string;
                u_id: string | null;
                a_id: string | null;
                meta?: {
                  ua?: string | null;
                  'ua-mobile'?: string | null;
                  'ua-platform'?: string | null;
                  'user-agent'?: string | null;
                  city?: string | null;
                  region?: string | null;
                  regionCode?: string | null;
                  postalCode?: string | null;
                  country?: string | null;
                  continent?: string | null;
                  timezone?: string | null;
                  latitude?: string | null;
                  longitude?: string | null;
                } | null;
                last_visit: string;
                created_at: string;
                updated_at: string;
                latestSession: {
                  id: string;
                  environment_id: string;
                  user_id: string | null;
                  meta?: unknown;
                  user_ids: string[] | null;
                  started_at: string | null;
                  ended_at: string | null;
                  created_at: string;
                  updated_at: string;
                };
              }[];
              meta: {
                limit: string;
              };
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/projects/{projectId}/environments/{environmentId}/users/{userId}': {
    get: {
      parameters: {
        path: {
          environmentId: string;
          projectId: string;
          organizationId: string;
          userId: string;
        };
      };
      responses: {
        /** @description User */
        200: {
          content: {
            'application/json': {
              id: string;
              environment_id: string;
              u_id: string | null;
              a_id: string | null;
              meta?: {
                ua?: string | null;
                'ua-mobile'?: string | null;
                'ua-platform'?: string | null;
                'user-agent'?: string | null;
                city?: string | null;
                region?: string | null;
                regionCode?: string | null;
                postalCode?: string | null;
                country?: string | null;
                continent?: string | null;
                timezone?: string | null;
                latitude?: string | null;
                longitude?: string | null;
              } | null;
              last_visit: string;
              created_at: string;
              updated_at: string;
              latestSession: {
                id: string;
                environment_id: string;
                user_id: string | null;
                meta?: unknown;
                user_ids: string[] | null;
                started_at: string | null;
                ended_at: string | null;
                created_at: string;
                updated_at: string;
              };
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/projects/{projectId}/environments/{environmentId}/steps/summary': {
    get: {
      parameters: {
        query?: {
          fromDate?: string | null;
          toDate?: string | null;
        };
        path: {
          environmentId: string;
          projectId: string;
          organizationId: string;
        };
      };
      responses: {
        /** @description Workflow summary */
        200: {
          content: {
            'application/json': {
              responseTime: number;
              externalCost?: number | null;
              averageDuration: number;
              averageCost: number;
              meta: {
                fromDate?: string | null;
                toDate?: string | null;
              };
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/projects/{projectId}/environments/{environmentId}/steps/summary/user/{userId}': {
    get: {
      parameters: {
        query?: {
          fromDate?: string | null;
          toDate?: string | null;
        };
        path: {
          environmentId: string;
          projectId: string;
          organizationId: string;
          userId: string;
        };
      };
      responses: {
        /** @description User workflow summary */
        200: {
          content: {
            'application/json': {
              responseTime: number;
              externalCost?: number | null;
              meta: {
                fromDate?: string | null;
                toDate?: string | null;
              };
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/projects/{projectId}/environments/{environmentId}/steps/summary/sessions/{sessionId}': {
    get: {
      parameters: {
        path: {
          environmentId: string;
          projectId: string;
          organizationId: string;
          sessionId: string;
        };
      };
      responses: {
        /** @description Session workflow summary */
        200: {
          content: {
            'application/json': {
              responseTime: number;
              externalCost?: number | null;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/projects/{projectId}/environments/{environmentId}/steps/download': {
    get: {
      parameters: {
        query?: {
          fromDate?: string | null;
          toDate?: string | null;
        };
        path: {
          environmentId: string;
          projectId: string;
          organizationId: string;
        };
      };
      responses: {
        /** @description Download task */
        200: {
          content: {
            'application/json': {
              total: number;
              requiredInputCount: number;
              inReviewCount: number;
              fixedCount: number;
              incompleteCount: number;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/projects/{projectId}/environments/{environmentId}/steps/{stepId}/evaluations': {
    patch: {
      parameters: {
        path: {
          environmentId: string;
          projectId: string;
          organizationId: string;
          stepId: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': {
            evaluationId: string;
            corrected_reason?: string | null;
            corrected_score?: number | null;
          }[];
        };
      };
      responses: {
        /** @description Correct evaluation */
        200: {
          content: {
            'application/json': {
              message: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/projects/{projectId}/environments/{environmentId}/steps/{stepId}': {
    patch: {
      parameters: {
        path: {
          environmentId: string;
          projectId: string;
          organizationId: string;
          stepId: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': {
            correction?: string | null;
            score?: number | null;
          };
        };
      };
      responses: {
        /** @description Step updated */
        200: {
          content: {
            'application/json': {
              id: string;
              a_id: string | null;
              action_id: string | null;
              environment_id: string;
              pos: number | null;
              level: number | null;
              input: string | null;
              output: string | null;
              actual_input: string | null;
              actual_output: string | null;
              correction?: unknown;
              score: string | null;
              history?:
                | {
                    score?: string | null;
                    correction?: string | null;
                  }[]
                | null;
              model: string | null;
              provider: string | null;
              temperature: string | null;
              meta: {
                description?: string | null;
                http?: {
                  url?: string | null;
                  status_code?: number | null;
                } | null;
              } | null;
              trace_id: string | null;
              span_id: string | null;
              parent_span_id: string | null;
              name: string | null;
              type: string | null;
              kind: string | null;
              workflow_id: string | null;
              task_id: string | null;
              agent_id: string | null;
              tool_id: string | null;
              is_streaming: boolean | null;
              is_llm: boolean | null;
              prompt_key: string | null;
              prompt_version: string | null;
              prompt_name: string | null;
              prompt_hash: string | null;
              prompt_template_variables?: unknown;
              is_empty: boolean | null;
              status: number | null;
              feedback_status: number | null;
              error_description: string | null;
              running_cost: string | null;
              evaluation_cost: string | null;
              duration: number | null;
              started_at: string | null;
              ended_at: string | null;
              created_at: string;
              updated_at: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/projects/{projectId}/environments/{environmentId}/api-keys': {
    /** @description List api keys for environments */
    get: {
      parameters: {
        path: {
          environmentId: string;
          projectId: string;
          organizationId: string;
        };
      };
      responses: {
        /** @description List api keys */
        200: {
          content: {
            'application/json': {
              id: string;
              environment_id: string;
              token: string;
              public_key: string;
              secret_short: string;
              is_connected: boolean | null;
              expired_at: string | null;
              created_at: string;
              updated_at: string;
            }[];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
    /** @description Create new api keys */
    post: {
      parameters: {
        path: {
          environmentId: string;
          projectId: string;
          organizationId: string;
        };
      };
      responses: {
        /** @description Api key */
        201: {
          content: {
            'application/json': {
              apiKey: string;
              apiSecret: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/projects/{projectId}/environments/{environmentId}/api-keys/{apiKeyId}': {
    /** @description Delete api key */
    delete: {
      parameters: {
        path: {
          environmentId: string;
          projectId: string;
          organizationId: string;
          apiKeyId: string;
        };
      };
      responses: {
        /** @description Deleted */
        202: {
          content: {
            'application/json': {
              message: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
    /** @description Generate new private key from apikey */
    patch: {
      parameters: {
        path: {
          environmentId: string;
          projectId: string;
          organizationId: string;
          apiKeyId: string;
        };
      };
      responses: {
        /** @description New Private Key */
        200: {
          content: {
            'application/json': {
              apiKey: string;
              apiSecret: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/projects/{projectId}/environments/{environmentId}/client-keys': {
    /** @description List client keys for environments */
    get: {
      parameters: {
        path: {
          environmentId: string;
          projectId: string;
          organizationId: string;
        };
      };
      responses: {
        /** @description List client keys */
        200: {
          content: {
            'application/json': {
              id: string;
              environment_id: string;
              token: string;
              iv: string;
              client: string | null;
              is_connected: boolean | null;
              expired_at: string | null;
              created_at: string;
              updated_at: string;
            }[];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
    /** @description Create new client keys */
    post: {
      parameters: {
        path: {
          environmentId: string;
          projectId: string;
          organizationId: string;
        };
      };
      responses: {
        /** @description Client key */
        201: {
          content: {
            'application/json': {
              id: string;
              environment_id: string;
              token: string;
              iv: string;
              client: string | null;
              is_connected: boolean | null;
              expired_at: string | null;
              created_at: string;
              updated_at: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/projects/{projectId}/environments/{environmentId}/client-keys/{clientKeyId}': {
    /** @description Delete client key */
    delete: {
      parameters: {
        path: {
          environmentId: string;
          projectId: string;
          organizationId: string;
          clientKeyId: string;
        };
      };
      responses: {
        /** @description Deleted */
        202: {
          content: {
            'application/json': {
              message: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/projects/{projectId}/environments/{environmentId}/plugins': {
    /** @description List plugins for environments */
    get: {
      parameters: {
        path: {
          environmentId: string;
          projectId: string;
          organizationId: string;
        };
      };
      responses: {
        /** @description List of plugins */
        200: {
          content: {
            'application/json': {
              id: string;
              environment_id: string;
              model_version_id: string | null;
              category: number;
              is_enabled: boolean | null;
              config: string | null;
              created_at: string;
              updated_at: string;
            }[];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
    /** @description Create new plugin */
    post: {
      parameters: {
        path: {
          environmentId: string;
          projectId: string;
          organizationId: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': {
            category: number;
            modelVersionId?: string | null;
          };
        };
      };
      responses: {
        /** @description Plugin */
        201: {
          content: {
            'application/json': {
              id: string;
              environment_id: string;
              model_version_id: string | null;
              category: number;
              is_enabled: boolean | null;
              config: string | null;
              created_at: string;
              updated_at: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/projects/{projectId}/environments/{environmentId}/plugins/{pluginId}': {
    /** @description Delete plugin */
    delete: {
      parameters: {
        path: {
          environmentId: string;
          projectId: string;
          organizationId: string;
          pluginId: string;
        };
      };
      responses: {
        /** @description Deleted */
        202: {
          content: {
            'application/json': {
              message: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
    /** @description Toggle plugin on/off */
    patch: {
      parameters: {
        path: {
          environmentId: string;
          projectId: string;
          organizationId: string;
          pluginId: string;
        };
      };
      responses: {
        /** @description Plugin */
        200: {
          content: {
            'application/json': {
              id: string;
              environment_id: string;
              model_version_id: string | null;
              category: number;
              is_enabled: boolean | null;
              config: string | null;
              created_at: string;
              updated_at: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/projects/{projectId}/environments/{environmentId}/graphs/sankey/task-journey': {
    get: {
      parameters: {
        query?: {
          fromDate?: string | null;
          toDate?: string | null;
        };
        path: {
          environmentId: string;
          projectId: string;
          organizationId: string;
        };
      };
      responses: {
        /** @description Task */
        200: {
          content: {
            'application/json': {
              nodes: {
                id: string;
              }[];
              links: {
                source: string;
                target: string;
                value: number;
                sourceStatus: number;
                targetStatus: number;
              }[];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/projects/{projectId}/environments/{environmentId}/graphs/sankey/task-journey/user/{userId}': {
    get: {
      parameters: {
        query?: {
          fromDate?: string | null;
          toDate?: string | null;
        };
        path: {
          environmentId: string;
          projectId: string;
          organizationId: string;
          userId: string;
        };
      };
      responses: {
        /** @description Task */
        200: {
          content: {
            'application/json': {
              nodes: {
                id: string;
              }[];
              links: {
                source: string;
                target: string;
                value: number;
                sourceStatus: number;
                targetStatus: number;
              }[];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/projects/{projectId}/environments/{environmentId}/graphs/sankey/task-journey/sessions/{sessionId}': {
    get: {
      parameters: {
        query?: {
          fromDate?: string | null;
          toDate?: string | null;
        };
        path: {
          environmentId: string;
          projectId: string;
          organizationId: string;
          sessionId: string;
        };
      };
      responses: {
        /** @description Task */
        200: {
          content: {
            'application/json': {
              nodes: {
                id: string;
              }[];
              links: {
                source: string;
                target: string;
                value: number;
                sourceStatus: number;
                targetStatus: number;
              }[];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/projects/{projectId}/environments/{environmentId}/graphs/line/costs': {
    get: {
      parameters: {
        query?: {
          fromDate?: string | null;
          toDate?: string | null;
          appVersion?: string | null;
          type?: 1 | 2 | null;
          names?: string[] | null;
        };
        path: {
          environmentId: string;
          projectId: string;
          organizationId: string;
        };
      };
      responses: {
        /** @description Task */
        200: {
          content: {
            'application/json': unknown[];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/projects/{projectId}/environments/{environmentId}/workflows/task-workflow': {
    get: {
      parameters: {
        query: {
          fromDate?: string | null;
          toDate?: string | null;
          name: string;
          pos?: number | null;
          status?: number | null;
          next_name?: string | null;
          next_pos?: number | null;
          next_status?: number | null;
        };
        path: {
          environmentId: string;
          projectId: string;
          organizationId: string;
        };
      };
      responses: {
        /** @description Workflow */
        200: {
          content: {
            'application/json': {
              action: {
                name: string;
                pos?: number | null;
                status?: number | null;
                actionSummaries: {
                  count: number;
                  action_count: number;
                  status: number;
                }[];
                steps: {
                  id: string;
                  a_id: string | null;
                  action_id: string | null;
                  environment_id: string;
                  pos: number | null;
                  level: number | null;
                  input: string | null;
                  output: string | null;
                  actual_input: string | null;
                  actual_output: string | null;
                  correction?: unknown;
                  score: string | null;
                  history?:
                    | {
                        score?: string | null;
                        correction?: string | null;
                      }[]
                    | null;
                  model: string | null;
                  provider: string | null;
                  temperature: string | null;
                  meta: {
                    description?: string | null;
                    http?: {
                      url?: string | null;
                      status_code?: number | null;
                    } | null;
                  } | null;
                  trace_id: string | null;
                  span_id: string | null;
                  parent_span_id: string | null;
                  name: string | null;
                  type: string | null;
                  kind: string | null;
                  workflow_id: string | null;
                  task_id: string | null;
                  agent_id: string | null;
                  tool_id: string | null;
                  is_streaming: boolean | null;
                  is_llm: boolean | null;
                  prompt_key: string | null;
                  prompt_version: string | null;
                  prompt_name: string | null;
                  prompt_hash: string | null;
                  prompt_template_variables?: unknown;
                  is_empty: boolean | null;
                  status: number | null;
                  feedback_status: number | null;
                  error_description: string | null;
                  running_cost: string | null;
                  evaluation_cost: string | null;
                  duration: number | null;
                  started_at: string | null;
                  ended_at: string | null;
                  created_at: string;
                  updated_at: string;
                  evaluations: {
                    count: number;
                    category?: number | null;
                    good_count?: number | null;
                    bad_count?: number | null;
                  }[];
                }[];
              };
              next_action: {
                name: string;
                pos?: number | null;
                status?: number | null;
                actionSummaries: {
                  count: number;
                  action_count: number;
                  status: number;
                }[];
                steps: {
                  id: string;
                  a_id: string | null;
                  action_id: string | null;
                  environment_id: string;
                  pos: number | null;
                  level: number | null;
                  input: string | null;
                  output: string | null;
                  actual_input: string | null;
                  actual_output: string | null;
                  correction?: unknown;
                  score: string | null;
                  history?:
                    | {
                        score?: string | null;
                        correction?: string | null;
                      }[]
                    | null;
                  model: string | null;
                  provider: string | null;
                  temperature: string | null;
                  meta: {
                    description?: string | null;
                    http?: {
                      url?: string | null;
                      status_code?: number | null;
                    } | null;
                  } | null;
                  trace_id: string | null;
                  span_id: string | null;
                  parent_span_id: string | null;
                  name: string | null;
                  type: string | null;
                  kind: string | null;
                  workflow_id: string | null;
                  task_id: string | null;
                  agent_id: string | null;
                  tool_id: string | null;
                  is_streaming: boolean | null;
                  is_llm: boolean | null;
                  prompt_key: string | null;
                  prompt_version: string | null;
                  prompt_name: string | null;
                  prompt_hash: string | null;
                  prompt_template_variables?: unknown;
                  is_empty: boolean | null;
                  status: number | null;
                  feedback_status: number | null;
                  error_description: string | null;
                  running_cost: string | null;
                  evaluation_cost: string | null;
                  duration: number | null;
                  started_at: string | null;
                  ended_at: string | null;
                  created_at: string;
                  updated_at: string;
                  evaluations: {
                    count: number;
                    category?: number | null;
                    good_count?: number | null;
                    bad_count?: number | null;
                  }[];
                }[];
              };
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/projects/{projectId}/environments/{environmentId}/sessions/users/{userId}/count': {
    get: {
      parameters: {
        query?: {
          limit?: number | null;
        };
        path: {
          environmentId: string;
          projectId: string;
          organizationId: string;
          userId: string;
        };
      };
      responses: {
        /** @description Action */
        200: {
          content: {
            'application/json': {
              total: number;
              totalPage: number;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/projects/{projectId}/environments/{environmentId}/sessions/users/{userId}': {
    get: {
      parameters: {
        query?: {
          page?: number | null;
          limit?: number | null;
        };
        path: {
          environmentId: string;
          projectId: string;
          organizationId: string;
          userId: string;
        };
      };
      responses: {
        /** @description LIst user session */
        200: {
          content: {
            'application/json': {
              list: {
                id: string;
                environment_id: string;
                user_id: string | null;
                meta?: unknown;
                user_ids: string[] | null;
                started_at: string | null;
                ended_at: string | null;
                created_at: string;
                updated_at: string;
              }[];
              meta: {
                limit: number;
              };
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/projects/{projectId}/environments/{environmentId}/sessions/{sessionId}': {
    get: {
      parameters: {
        path: {
          environmentId: string;
          projectId: string;
          organizationId: string;
          sessionId: string;
        };
      };
      responses: {
        /** @description Session */
        200: {
          content: {
            'application/json': {
              id: string;
              environment_id: string;
              user_id: string | null;
              meta?: unknown;
              user_ids: string[] | null;
              started_at: string | null;
              ended_at: string | null;
              created_at: string;
              updated_at: string;
              tasks: {
                id: string;
                session_id: string | null;
                environment_id: string;
                status: number | null;
                name: string | null;
                pos: number | null;
                action_count: number | null;
                meta?: unknown;
                started_at: string | null;
                ended_at: string | null;
                created_at: string;
                updated_at: string;
              }[];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/projects/{projectId}/environments/{environmentId}/app-versions': {
    get: {
      parameters: {
        query?: {
          fromDate?: string | null;
          toDate?: string | null;
        };
        path: {
          environmentId: string;
          projectId: string;
          organizationId: string;
        };
      };
      responses: {
        /** @description App versions */
        200: {
          content: {
            'application/json': string[];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/projects/{projectId}/environments/{environmentId}': {
    get: {
      parameters: {
        path: {
          environmentId: string;
          projectId: string;
          organizationId: string;
        };
      };
      responses: {
        /** @description Environment */
        200: {
          content: {
            'application/json': {
              id: string;
              project_id: string;
              name: string;
              is_deleted: boolean;
              created_at: string;
              updated_at: string;
              client_connected: boolean;
              api_connected: boolean;
              app_version?: string | null;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
    delete: {
      parameters: {
        path: {
          environmentId: string;
          projectId: string;
          organizationId: string;
        };
      };
      responses: {
        /** @description Removed */
        202: {
          content: {
            'application/json': {
              message: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
    patch: {
      parameters: {
        path: {
          environmentId: string;
          projectId: string;
          organizationId: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': {
            name: string;
          };
        };
      };
      responses: {
        /** @description Environment */
        200: {
          content: {
            'application/json': {
              id: string;
              project_id: string;
              name: string;
              is_deleted: boolean;
              created_at: string;
              updated_at: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/projects/{projectId}/environments': {
    get: {
      parameters: {
        path: {
          projectId: string;
          organizationId: string;
        };
      };
      responses: {
        /** @description Environments */
        200: {
          content: {
            'application/json': {
              id: string;
              project_id: string;
              name: string;
              is_deleted: boolean;
              created_at: string;
              updated_at: string;
            }[];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        path: {
          projectId: string;
          organizationId: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': {
            name: string;
          };
        };
      };
      responses: {
        /** @description Environment */
        201: {
          content: {
            'application/json': {
              id: string;
              project_id: string;
              name: string;
              is_deleted: boolean;
              created_at: string;
              updated_at: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Project not found */
        404: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/projects/{projectId}/prompts/{promptId}/prompt-versions': {
    get: {
      parameters: {
        path: {
          promptId: string;
          projectId: string;
          organizationId: string;
        };
      };
      responses: {
        /** @description Prompts */
        200: {
          content: {
            'application/json': {
              id: string;
              prompt_id: string;
              model_version_id: string | null;
              version: string;
              system: string | null;
              template: string;
              temperature: string | null;
              meta?: unknown;
              schema?: unknown;
              is_deleted: boolean;
              created_at: string;
              updated_at: string;
            }[];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        path: {
          promptId: string;
          projectId: string;
          organizationId: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': {
            version: string;
            system?: string | null;
            template: string;
            meta?: unknown;
            schema?: unknown;
            temperature?: number | null;
          };
        };
      };
      responses: {
        /** @description Prompt */
        201: {
          content: {
            'application/json': {
              id: string;
              prompt_id: string;
              model_version_id: string | null;
              version: string;
              system: string | null;
              template: string;
              temperature: string | null;
              meta?: unknown;
              schema?: unknown;
              is_deleted: boolean;
              created_at: string;
              updated_at: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/projects/{projectId}/prompts/{promptId}/prompt-versions/{promptVersionId}': {
    delete: {
      parameters: {
        path: {
          promptVersionId: string;
          promptId: string;
          projectId: string;
          organizationId: string;
        };
      };
      responses: {
        /** @description Removed */
        202: {
          content: {
            'application/json': {
              message: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
    patch: {
      parameters: {
        path: {
          promptVersionId: string;
          promptId: string;
          projectId: string;
          organizationId: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': {
            version?: string | null;
            system?: string | null;
            template?: string | null;
            meta?: unknown;
            schema?: unknown;
            temperature?: number | null;
          };
        };
      };
      responses: {
        /** @description Prompt */
        200: {
          content: {
            'application/json': {
              id: string;
              prompt_id: string;
              model_version_id: string | null;
              version: string;
              system: string | null;
              template: string;
              temperature: string | null;
              meta?: unknown;
              schema?: unknown;
              is_deleted: boolean;
              created_at: string;
              updated_at: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/projects/{projectId}/prompts/{promptId}': {
    get: {
      parameters: {
        path: {
          promptId: string;
          projectId: string;
          organizationId: string;
        };
      };
      responses: {
        /** @description Prompt */
        200: {
          content: {
            'application/json': {
              id: string;
              project_id: string;
              name: string;
              is_deleted: boolean;
              created_at: string;
              updated_at: string;
              versions: {
                id: string;
                prompt_id: string;
                model_version_id: string | null;
                version: string;
                system: string | null;
                template: string;
                temperature: string | null;
                meta?: unknown;
                schema?: unknown;
                is_deleted: boolean;
                created_at: string;
                updated_at: string;
              }[];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
    delete: {
      parameters: {
        path: {
          promptId: string;
          projectId: string;
          organizationId: string;
        };
      };
      responses: {
        /** @description Removed */
        202: {
          content: {
            'application/json': {
              message: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
    patch: {
      parameters: {
        path: {
          promptId: string;
          projectId: string;
          organizationId: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': {
            name: string;
          };
        };
      };
      responses: {
        /** @description Prompt */
        200: {
          content: {
            'application/json': {
              id: string;
              project_id: string;
              name: string;
              is_deleted: boolean;
              created_at: string;
              updated_at: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/projects/{projectId}/prompts': {
    get: {
      parameters: {
        query?: {
          name?: string | null;
        };
        path: {
          projectId: string;
          organizationId: string;
        };
      };
      responses: {
        /** @description Prompts */
        200: {
          content: {
            'application/json': {
              id: string;
              project_id: string;
              name: string;
              is_deleted: boolean;
              created_at: string;
              updated_at: string;
              latestVersion: {
                id: string;
                prompt_id: string;
                model_version_id: string | null;
                version: string;
                system: string | null;
                template: string;
                temperature: string | null;
                meta?: unknown;
                schema?: unknown;
                is_deleted: boolean;
                created_at: string;
                updated_at: string;
              };
            }[];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        path: {
          projectId: string;
          organizationId: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': {
            name: string;
            version: string;
            template: string;
            system?: string | null;
            schema?: unknown;
          };
        };
      };
      responses: {
        /** @description Prompt */
        201: {
          content: {
            'application/json': {
              id: string;
              project_id: string;
              name: string;
              is_deleted: boolean;
              created_at: string;
              updated_at: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/projects/{projectId}/data-sets/{dataSetId}/data-points/upload': {
    post: {
      parameters: {
        path: {
          dataSetId: string;
          projectId: string;
          organizationId: string;
        };
      };
      responses: {
        /** @description DataPoint */
        201: {
          content: {
            'application/json': {
              id: string;
              data_set_id: string;
              input: string;
              output: string;
              variables?: unknown;
              score: string | null;
              created_at: string;
              updated_at: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/projects/{projectId}/data-sets/{dataSetId}/data-points': {
    get: {
      parameters: {
        query?: {
          limit?: number | null;
          page?: number | null;
        };
        path: {
          dataSetId: string;
          projectId: string;
          organizationId: string;
        };
      };
      responses: {
        /** @description DataPoints */
        200: {
          content: {
            'application/json': {
              list: {
                id: string;
                data_set_id: string;
                input: string;
                output: string;
                variables?: unknown;
                score: string | null;
                created_at: string;
                updated_at: string;
              }[];
              meta: {
                limit: number;
              };
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/projects/{projectId}/data-sets/{dataSetId}/data-points/{dataPointId}': {
    delete: {
      parameters: {
        path: {
          dataPointId: string;
          dataSetId: string;
          projectId: string;
          organizationId: string;
        };
      };
      responses: {
        /** @description Removed */
        202: {
          content: {
            'application/json': {
              message: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
    patch: {
      parameters: {
        path: {
          dataPointId: string;
          dataSetId: string;
          projectId: string;
          organizationId: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': {
            input: string;
            output: string;
            variables?: unknown;
          };
        };
      };
      responses: {
        /** @description DataPoint */
        200: {
          content: {
            'application/json': {
              id: string;
              data_set_id: string;
              input: string;
              output: string;
              variables?: unknown;
              score: string | null;
              created_at: string;
              updated_at: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/projects/{projectId}/data-sets/{dataSetId}/data-checks/{dataCheckId}/check-jobs/{checkJobId}': {
    get: {
      parameters: {
        path: {
          checkJobId: string;
          dataCheckId: string;
          dataSetId: string;
          projectId: string;
          organizationId: string;
        };
      };
      responses: {
        /** @description CheckJob */
        200: {
          content: {
            'application/json': {
              id: string;
              data_point_id: string | null;
              data_check_id: string | null;
              input: string | null;
              output: string | null;
              status: number | null;
              succces: boolean | null;
              created_at: string;
              updated_at: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
    delete: {
      parameters: {
        path: {
          checkJobId: string;
          dataCheckId: string;
          dataSetId: string;
          projectId: string;
          organizationId: string;
        };
      };
      responses: {
        /** @description Removed */
        202: {
          content: {
            'application/json': {
              message: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/projects/{projectId}/data-sets/{dataSetId}/data-checks/{dataCheckId}/check-jobs': {
    get: {
      parameters: {
        query?: {
          limit?: number | null;
          page?: number | null;
          comparisonIds?: unknown;
        };
        path: {
          dataCheckId: string;
          dataSetId: string;
          projectId: string;
          organizationId: string;
        };
      };
      responses: {
        /** @description CheckJobs */
        200: {
          content: {
            'application/json': {
              list: {
                original: {
                  id: string;
                  data_set_id: string;
                  input: string;
                  output: string;
                  variables?: unknown;
                  score: string | null;
                  created_at: string;
                  updated_at: string;
                };
                checks: {
                  id: string;
                  data_point_id: string | null;
                  data_check_id: string | null;
                  input: string | null;
                  output: string | null;
                  status: number | null;
                  succces: boolean | null;
                  created_at: string;
                  updated_at: string;
                }[];
              }[];
              meta: {
                limit: number;
              };
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/projects/{projectId}/data-sets/{dataSetId}/data-checks/{dataCheckId}': {
    get: {
      parameters: {
        path: {
          dataCheckId: string;
          dataSetId: string;
          projectId: string;
          organizationId: string;
        };
      };
      responses: {
        /** @description DataCheck */
        200: {
          content: {
            'application/json': {
              id: string;
              data_set_id: string;
              model_version_id: string | null;
              prompt_version_id: string | null;
              name: string | null;
              meta?: unknown;
              status: number | null;
              created_at: string;
              updated_at: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
    delete: {
      parameters: {
        path: {
          dataCheckId: string;
          dataSetId: string;
          projectId: string;
          organizationId: string;
        };
      };
      responses: {
        /** @description Removed */
        202: {
          content: {
            'application/json': {
              message: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/projects/{projectId}/data-sets/{dataSetId}/data-checks': {
    get: {
      parameters: {
        query?: {
          limit?: number | null;
          page?: number | null;
        };
        path: {
          dataSetId: string;
          projectId: string;
          organizationId: string;
        };
      };
      responses: {
        /** @description DataChecks */
        200: {
          content: {
            'application/json': {
              list: {
                id: string;
                data_set_id: string;
                model_version_id: string | null;
                prompt_version_id: string | null;
                name: string | null;
                meta?: unknown;
                status: number | null;
                created_at: string;
                updated_at: string;
                modelVersion: {
                  id: string;
                  model_id: string;
                  version: string;
                  api_key: string | null;
                  masked_key: string | null;
                  iv_key: string | null;
                  api_endpoint: string | null;
                  extra?: {
                    vertex_project?: string | null;
                    vertex_location?: string | null;
                    vertex_credentials?: string | null;
                  } | null;
                  is_deleted: boolean;
                  created_at: string;
                  updated_at: string;
                  model: {
                    id: string;
                    organization_id: string;
                    name: string;
                    vendor: number;
                    method: number | null;
                    is_deleted: boolean;
                    created_at: string;
                    updated_at: string;
                  };
                };
                promptVersion: {
                  id: string;
                  prompt_id: string;
                  model_version_id: string | null;
                  version: string;
                  system: string | null;
                  template: string;
                  temperature: string | null;
                  meta?: unknown;
                  schema?: unknown;
                  is_deleted: boolean;
                  created_at: string;
                  updated_at: string;
                  prompt: {
                    id: string;
                    project_id: string;
                    name: string;
                    is_deleted: boolean;
                    created_at: string;
                    updated_at: string;
                  };
                };
              }[];
              meta: {
                limit: number;
              };
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        path: {
          dataSetId: string;
          projectId: string;
          organizationId: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': {
            model_version_id: string;
            prompt_version_id: string;
            mapper?: unknown;
          };
        };
      };
      responses: {
        /** @description DataCheck */
        201: {
          content: {
            'application/json': {
              id: string;
              data_set_id: string;
              model_version_id: string | null;
              prompt_version_id: string | null;
              name: string | null;
              meta?: unknown;
              status: number | null;
              created_at: string;
              updated_at: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/projects/{projectId}/data-sets/{dataSetId}': {
    get: {
      parameters: {
        path: {
          dataSetId: string;
          projectId: string;
          organizationId: string;
        };
      };
      responses: {
        /** @description DataSet */
        200: {
          content: {
            'application/json': {
              id: string;
              project_id: string;
              name: string;
              schema?: unknown;
              is_deleted: boolean;
              created_at: string;
              updated_at: string;
              checksCount: number;
              pointsCount: number;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
    delete: {
      parameters: {
        path: {
          dataSetId: string;
          projectId: string;
          organizationId: string;
        };
      };
      responses: {
        /** @description Removed */
        202: {
          content: {
            'application/json': {
              message: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
    patch: {
      parameters: {
        path: {
          dataSetId: string;
          projectId: string;
          organizationId: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': {
            name: string;
          };
        };
      };
      responses: {
        /** @description DataSet */
        200: {
          content: {
            'application/json': {
              id: string;
              project_id: string;
              name: string;
              schema?: unknown;
              is_deleted: boolean;
              created_at: string;
              updated_at: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/projects/{projectId}/data-sets': {
    get: {
      parameters: {
        query?: {
          name?: string | null;
        };
        path: {
          projectId: string;
          organizationId: string;
        };
      };
      responses: {
        /** @description DataSets */
        200: {
          content: {
            'application/json': {
              id: string;
              project_id: string;
              name: string;
              schema?: unknown;
              is_deleted: boolean;
              created_at: string;
              updated_at: string;
              latestCheck: {
                id: string;
                data_set_id: string;
                model_version_id: string | null;
                prompt_version_id: string | null;
                name: string | null;
                meta?: unknown;
                status: number | null;
                created_at: string;
                updated_at: string;
              };
            }[];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        path: {
          projectId: string;
          organizationId: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': {
            name: string;
          };
        };
      };
      responses: {
        /** @description DataSet */
        201: {
          content: {
            'application/json': {
              id: string;
              project_id: string;
              name: string;
              schema?: unknown;
              is_deleted: boolean;
              created_at: string;
              updated_at: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/projects/{projectId}': {
    get: {
      parameters: {
        path: {
          projectId: string;
          organizationId: string;
        };
      };
      responses: {
        /** @description Project */
        200: {
          content: {
            'application/json': {
              id: string;
              organization_id: string;
              name: string;
              is_deleted: boolean;
              created_at: string;
              updated_at: string;
              client_connected: boolean;
              api_connected: boolean;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
    delete: {
      parameters: {
        path: {
          projectId: string;
          organizationId: string;
        };
      };
      responses: {
        /** @description Removed */
        202: {
          content: {
            'application/json': {
              message: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
    patch: {
      parameters: {
        path: {
          projectId: string;
          organizationId: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': {
            name: string;
          };
        };
      };
      responses: {
        /** @description Project */
        200: {
          content: {
            'application/json': {
              id: string;
              organization_id: string;
              name: string;
              is_deleted: boolean;
              created_at: string;
              updated_at: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/projects': {
    get: {
      parameters: {
        path: {
          organizationId: string;
        };
      };
      responses: {
        /** @description Projects */
        200: {
          content: {
            'application/json': {
              id: string;
              organization_id: string;
              name: string;
              is_deleted: boolean;
              created_at: string;
              updated_at: string;
            }[];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        path: {
          organizationId: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': {
            name: string;
          };
        };
      };
      responses: {
        /** @description Project */
        201: {
          content: {
            'application/json': {
              id: string;
              organization_id: string;
              name: string;
              is_deleted: boolean;
              created_at: string;
              updated_at: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Upgrade Subscription */
        402: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/models/{modelId}/model-versions/{modelVersionId}': {
    get: {
      parameters: {
        path: {
          modelVersionId: string;
          modelId: string;
          organizationId: string;
        };
      };
      responses: {
        /** @description Model */
        200: {
          content: {
            'application/json': {
              id: string;
              model_id: string;
              version: string;
              api_key: string | null;
              masked_key: string | null;
              iv_key: string | null;
              api_endpoint: string | null;
              extra?: {
                vertex_project?: string | null;
                vertex_location?: string | null;
                vertex_credentials?: string | null;
              } | null;
              is_deleted: boolean;
              created_at: string;
              updated_at: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
    delete: {
      parameters: {
        path: {
          modelVersionId: string;
          modelId: string;
          organizationId: string;
        };
      };
      responses: {
        /** @description Removed */
        202: {
          content: {
            'application/json': {
              message: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
    patch: {
      parameters: {
        path: {
          modelVersionId: string;
          modelId: string;
          organizationId: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': {
            version?: string | null;
            api_key?: string | null;
            api_endpoint?: string | null;
            extra?: unknown;
          };
        };
      };
      responses: {
        /** @description Model */
        200: {
          content: {
            'application/json': {
              id: string;
              model_id: string;
              version: string;
              api_key: string | null;
              masked_key: string | null;
              iv_key: string | null;
              api_endpoint: string | null;
              extra?: {
                vertex_project?: string | null;
                vertex_location?: string | null;
                vertex_credentials?: string | null;
              } | null;
              is_deleted: boolean;
              created_at: string;
              updated_at: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/models/{modelId}/model-versions': {
    get: {
      parameters: {
        path: {
          modelId: string;
          organizationId: string;
        };
      };
      responses: {
        /** @description Models */
        200: {
          content: {
            'application/json': {
              id: string;
              model_id: string;
              version: string;
              api_key: string | null;
              masked_key: string | null;
              iv_key: string | null;
              api_endpoint: string | null;
              extra?: {
                vertex_project?: string | null;
                vertex_location?: string | null;
                vertex_credentials?: string | null;
              } | null;
              is_deleted: boolean;
              created_at: string;
              updated_at: string;
            }[];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        path: {
          modelId: string;
          organizationId: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': {
            version: string;
            api_key?: string | null;
            api_endpoint?: string | null;
            extra?: unknown;
          };
        };
      };
      responses: {
        /** @description Model */
        201: {
          content: {
            'application/json': {
              id: string;
              model_id: string;
              version: string;
              api_key: string | null;
              masked_key: string | null;
              iv_key: string | null;
              api_endpoint: string | null;
              extra?: {
                vertex_project?: string | null;
                vertex_location?: string | null;
                vertex_credentials?: string | null;
              } | null;
              is_deleted: boolean;
              created_at: string;
              updated_at: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/models/{modelId}': {
    get: {
      parameters: {
        path: {
          modelId: string;
          organizationId: string;
        };
      };
      responses: {
        /** @description Model */
        200: {
          content: {
            'application/json': {
              id: string;
              organization_id: string;
              name: string;
              vendor: number;
              method: number | null;
              is_deleted: boolean;
              created_at: string;
              updated_at: string;
              versions: {
                id: string;
                model_id: string;
                version: string;
                api_key: string | null;
                masked_key: string | null;
                iv_key: string | null;
                api_endpoint: string | null;
                extra?: {
                  vertex_project?: string | null;
                  vertex_location?: string | null;
                  vertex_credentials?: string | null;
                } | null;
                is_deleted: boolean;
                created_at: string;
                updated_at: string;
              }[];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
    delete: {
      parameters: {
        path: {
          modelId: string;
          organizationId: string;
        };
      };
      responses: {
        /** @description Removed */
        202: {
          content: {
            'application/json': {
              message: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
    patch: {
      parameters: {
        path: {
          modelId: string;
          organizationId: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': {
            name?: string | null;
            vendor?: number | null;
            method?: number | null;
          };
        };
      };
      responses: {
        /** @description Model */
        200: {
          content: {
            'application/json': {
              id: string;
              organization_id: string;
              name: string;
              vendor: number;
              method: number | null;
              is_deleted: boolean;
              created_at: string;
              updated_at: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/models': {
    get: {
      parameters: {
        query?: {
          name?: string | null;
        };
        path: {
          organizationId: string;
        };
      };
      responses: {
        /** @description Models */
        200: {
          content: {
            'application/json': {
              id: string;
              organization_id: string;
              name: string;
              vendor: number;
              method: number | null;
              is_deleted: boolean;
              created_at: string;
              updated_at: string;
              latestVersion: {
                id: string;
                model_id: string;
                version: string;
                api_key: string | null;
                masked_key: string | null;
                iv_key: string | null;
                api_endpoint: string | null;
                extra?: {
                  vertex_project?: string | null;
                  vertex_location?: string | null;
                  vertex_credentials?: string | null;
                } | null;
                is_deleted: boolean;
                created_at: string;
                updated_at: string;
              };
            }[];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        path: {
          organizationId: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': {
            name: string;
            vendor: number;
            method?: number | null;
            /** @default */
            api_key?: string | null;
            /** @default */
            api_endpoint?: string | null;
            /** @default */
            api_version?: string | null;
            extra?: unknown;
          };
        };
      };
      responses: {
        /** @description Model */
        201: {
          content: {
            'application/json': {
              id: string;
              organization_id: string;
              name: string;
              vendor: number;
              method: number | null;
              is_deleted: boolean;
              created_at: string;
              updated_at: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/invitations/{invitationId}': {
    get: {
      parameters: {
        path: {
          invitationId: string;
          organizationId: string;
        };
      };
      responses: {
        /** @description Invitation */
        200: {
          content: {
            'application/json': {
              id: string;
              organization_id: string;
              role_id: string;
              token: string;
              expired_at: string;
              created_at: string;
              updated_at: string;
              organization: {
                id: string;
                name: string;
                is_deleted: boolean;
                quota_exceeded: boolean | null;
                created_at: string;
                updated_at: string;
              };
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
    delete: {
      parameters: {
        path: {
          invitationId: string;
          organizationId: string;
        };
      };
      responses: {
        /** @description Removed */
        202: {
          content: {
            'application/json': {
              message: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/invitations': {
    get: {
      parameters: {
        path: {
          organizationId: string;
        };
      };
      responses: {
        /** @description Invitations */
        200: {
          content: {
            'application/json': {
              id: string;
              organization_id: string;
              role_id: string;
              token: string;
              expired_at: string;
              created_at: string;
              updated_at: string;
              organization: {
                id: string;
                name: string;
                is_deleted: boolean;
                quota_exceeded: boolean | null;
                created_at: string;
                updated_at: string;
              };
            }[];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        path: {
          organizationId: string;
        };
      };
      responses: {
        /** @description Invitation */
        200: {
          content: {
            'application/json': {
              id: string;
              organization_id: string;
              role_id: string;
              token: string;
              expired_at: string;
              created_at: string;
              updated_at: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/members/{memberId}': {
    get: {
      parameters: {
        path: {
          memberId: string;
          organizationId: string;
        };
      };
      responses: {
        /** @description Member */
        200: {
          content: {
            'application/json': {
              id: string;
              user_id: string;
              organization_id: string;
              created_at: string;
              updated_at: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
    delete: {
      parameters: {
        path: {
          memberId: string;
          organizationId: string;
        };
      };
      responses: {
        /** @description Removed */
        202: {
          content: {
            'application/json': {
              message: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/members': {
    get: {
      parameters: {
        path: {
          organizationId: string;
        };
      };
      responses: {
        /** @description Members */
        200: {
          content: {
            'application/json': {
              id: string;
              user_id: string;
              organization_id: string;
              created_at: string;
              updated_at: string;
              user: {
                id: string;
                email: string;
                user_metadata?: {
                  full_name?: string | null;
                } | null;
              };
              isOwner: boolean;
            }[];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/subscriptions': {
    post: {
      parameters: {
        path: {
          organizationId: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': {
            priceKey: string;
          };
        };
      };
      responses: {
        /** @description Model */
        201: {
          content: {
            'application/json': {
              redirectUrl: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/subscriptions/checkout/{sessionId}': {
    get: {
      parameters: {
        path: {
          organizationId: string;
          sessionId: string;
        };
      };
      responses: {
        /** @description Checkout session */
        200: {
          content: {
            'application/json': {
              status: string;
              invoiceUrl: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}/subscriptions/portal': {
    get: {
      parameters: {
        path: {
          organizationId: string;
        };
      };
      responses: {
        /** @description Billing portal session */
        200: {
          content: {
            'application/json': {
              url: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations': {
    get: {
      responses: {
        /** @description List of organizations */
        200: {
          content: {
            'application/json': {
              id: string;
              name: string;
              is_deleted: boolean;
              quota_exceeded: boolean | null;
              created_at: string;
              updated_at: string;
              sub: {
                id: string;
                permissions: {
                  projects: number;
                  environments: number;
                  traces: number;
                };
                started_at: string;
                price_key: string;
                ended_at: string;
                is_trial: boolean;
                log_usage: number;
              };
              projects: {
                id: string;
                organization_id: string;
                name: string;
                is_deleted: boolean;
                created_at: string;
                updated_at: string;
                environments: {
                  id: string;
                  project_id: string;
                  name: string;
                  is_deleted: boolean;
                  created_at: string;
                  updated_at: string;
                }[];
              }[];
            }[];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
    post: {
      requestBody?: {
        content: {
          'application/json': {
            name: string;
          };
        };
      };
      responses: {
        /** @description Organization created */
        201: {
          content: {
            'application/json': {
              id: string;
              name: string;
              is_deleted: boolean;
              quota_exceeded: boolean | null;
              created_at: string;
              updated_at: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/organizations/{organizationId}': {
    get: {
      parameters: {
        path: {
          organizationId: string;
        };
      };
      responses: {
        /** @description Organization */
        200: {
          content: {
            'application/json': {
              id: string;
              name: string;
              is_deleted: boolean;
              quota_exceeded: boolean | null;
              created_at: string;
              updated_at: string;
              sub: {
                id: string;
                permissions: {
                  projects: number;
                  environments: number;
                  traces: number;
                };
                started_at: string;
                price_key: string;
                ended_at: string;
                is_trial: boolean;
                log_usage: number;
              };
              projects: {
                id: string;
                organization_id: string;
                name: string;
                is_deleted: boolean;
                created_at: string;
                updated_at: string;
                environments: {
                  id: string;
                  project_id: string;
                  name: string;
                  is_deleted: boolean;
                  created_at: string;
                  updated_at: string;
                }[];
              }[];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
    patch: {
      parameters: {
        path: {
          organizationId: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': {
            name: string;
          };
        };
      };
      responses: {
        /** @description Organization updated */
        200: {
          content: {
            'application/json': {
              id: string;
              name: string;
              is_deleted: boolean;
              quota_exceeded: boolean | null;
              created_at: string;
              updated_at: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/my-profile': {
    get: {
      responses: {
        /** @description Get user profile */
        200: {
          content: {
            'application/json': {
              id: string;
              email: string;
              user_metadata?: {
                full_name?: string | null;
              } | null;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/invitations/{token}': {
    get: {
      parameters: {
        path: {
          token: string;
        };
      };
      responses: {
        /** @description Invitation */
        200: {
          content: {
            'application/json': {
              id: string;
              organization_id: string;
              role_id: string;
              expired_at: string;
              created_at: string;
              updated_at: string;
              organization: {
                id: string;
                name: string;
                is_deleted: boolean;
                quota_exceeded: boolean | null;
                created_at: string;
                updated_at: string;
              };
            };
          };
        };
        /** @description Invitation not found */
        404: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
    post: {
      parameters: {
        path: {
          token: string;
        };
      };
      responses: {
        /** @description Invitation */
        201: {
          content: {
            'application/json': {
              message: string;
              error?: string | null;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Invitation not found */
        404: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {};
  responses: never;
  parameters: {};
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
