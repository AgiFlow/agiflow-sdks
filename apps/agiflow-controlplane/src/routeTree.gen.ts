/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as IndexImport } from './routes/index'
import { Route as DashboardIndexImport } from './routes/dashboard/index'
import { Route as AuthIndexImport } from './routes/auth/index'
import { Route as DashboardOrganizationImport } from './routes/dashboard/organization'
import { Route as DashboardOrganizationOrganizationIdImport } from './routes/dashboard/organization/$organizationId'
import { Route as DashboardOrganizationOrganizationIdProjectProjectIdImport } from './routes/dashboard/organization/$organizationId/project/$projectId'
import { Route as DashboardOrganizationOrganizationIdInvitationsTokenIndexImport } from './routes/dashboard/organization/$organizationId/invitations/$token/index'
import { Route as DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdImport } from './routes/dashboard/organization/$organizationId/project/$projectId/env/$environmentId'
import { Route as DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdLogsIndexImport } from './routes/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/logs/index'

// Create Virtual Routes

const AuthCallbackLazyImport = createFileRoute('/auth/callback')()
const DashboardOrganizationIndexLazyImport = createFileRoute(
  '/dashboard/organization/',
)()
const DashboardOrganizationOrganizationIdIndexLazyImport = createFileRoute(
  '/dashboard/organization/$organizationId/',
)()
const DashboardOrganizationOrganizationIdSettingsIndexLazyImport =
  createFileRoute('/dashboard/organization/$organizationId/settings/')()
const DashboardOrganizationOrganizationIdProjectIndexLazyImport =
  createFileRoute('/dashboard/organization/$organizationId/project/')()
const DashboardOrganizationOrganizationIdPaymentIndexLazyImport =
  createFileRoute('/dashboard/organization/$organizationId/payment/')()
const DashboardOrganizationOrganizationIdModelsIndexLazyImport =
  createFileRoute('/dashboard/organization/$organizationId/models/')()
const DashboardOrganizationOrganizationIdMembersIndexLazyImport =
  createFileRoute('/dashboard/organization/$organizationId/members/')()
const DashboardOrganizationOrganizationIdInvitationsIndexLazyImport =
  createFileRoute('/dashboard/organization/$organizationId/invitations/')()
const DashboardOrganizationOrganizationIdProjectProjectIdIndexLazyImport =
  createFileRoute(
    '/dashboard/organization/$organizationId/project/$projectId/',
  )()
const DashboardOrganizationOrganizationIdPaymentSuccessIndexLazyImport =
  createFileRoute('/dashboard/organization/$organizationId/payment/success/')()
const DashboardOrganizationOrganizationIdPaymentCancelledIndexLazyImport =
  createFileRoute(
    '/dashboard/organization/$organizationId/payment/cancelled/',
  )()
const DashboardOrganizationOrganizationIdModelsModelIdIndexLazyImport =
  createFileRoute('/dashboard/organization/$organizationId/models/$modelId/')()
const DashboardOrganizationOrganizationIdProjectProjectIdSettingsIndexLazyImport =
  createFileRoute(
    '/dashboard/organization/$organizationId/project/$projectId/settings/',
  )()
const DashboardOrganizationOrganizationIdProjectProjectIdPromptsIndexLazyImport =
  createFileRoute(
    '/dashboard/organization/$organizationId/project/$projectId/prompts/',
  )()
const DashboardOrganizationOrganizationIdProjectProjectIdEnvIndexLazyImport =
  createFileRoute(
    '/dashboard/organization/$organizationId/project/$projectId/env/',
  )()
const DashboardOrganizationOrganizationIdProjectProjectIdDataSetsIndexLazyImport =
  createFileRoute(
    '/dashboard/organization/$organizationId/project/$projectId/data-sets/',
  )()
const DashboardOrganizationOrganizationIdProjectProjectIdPromptsPromptIdIndexLazyImport =
  createFileRoute(
    '/dashboard/organization/$organizationId/project/$projectId/prompts/$promptId/',
  )()
const DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdIndexLazyImport =
  createFileRoute(
    '/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/',
  )()
const DashboardOrganizationOrganizationIdProjectProjectIdDataSetsDataSetIdIndexLazyImport =
  createFileRoute(
    '/dashboard/organization/$organizationId/project/$projectId/data-sets/$dataSetId/',
  )()
const DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdUsersIndexLazyImport =
  createFileRoute(
    '/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/users/',
  )()
const DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdTasksIndexLazyImport =
  createFileRoute(
    '/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/tasks/',
  )()
const DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdSettingsIndexLazyImport =
  createFileRoute(
    '/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/settings/',
  )()
const DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdPluginsIndexLazyImport =
  createFileRoute(
    '/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/plugins/',
  )()
const DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdUsersUserIdIndexLazyImport =
  createFileRoute(
    '/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/users/$userId/',
  )()
const DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdTasksTaskIdIndexLazyImport =
  createFileRoute(
    '/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/tasks/$taskId/',
  )()
const DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdSessionsSessionIdIndexLazyImport =
  createFileRoute(
    '/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/sessions/$sessionId/',
  )()
const DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdLogsActionIdIndexLazyImport =
  createFileRoute(
    '/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/logs/$actionId/',
  )()
const DashboardOrganizationOrganizationIdProjectProjectIdDataSetsDataSetIdChecksDataCheckIdIndexLazyImport =
  createFileRoute(
    '/dashboard/organization/$organizationId/project/$projectId/data-sets/$dataSetId/checks/$dataCheckId/',
  )()

// Create/Update Routes

const DashboardRoute = DashboardImport.update({
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardIndexRoute = DashboardIndexImport.update({
  path: '/',
  getParentRoute: () => DashboardRoute,
} as any)

const AuthIndexRoute = AuthIndexImport.update({
  path: '/auth/',
  getParentRoute: () => rootRoute,
} as any)

const AuthCallbackLazyRoute = AuthCallbackLazyImport.update({
  path: '/auth/callback',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/auth/callback.lazy').then((d) => d.Route))

const DashboardOrganizationRoute = DashboardOrganizationImport.update({
  path: '/organization',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardOrganizationIndexLazyRoute =
  DashboardOrganizationIndexLazyImport.update({
    path: '/',
    getParentRoute: () => DashboardOrganizationRoute,
  } as any).lazy(() =>
    import('./routes/dashboard/organization/index.lazy').then((d) => d.Route),
  )

const DashboardOrganizationOrganizationIdRoute =
  DashboardOrganizationOrganizationIdImport.update({
    path: '/$organizationId',
    getParentRoute: () => DashboardOrganizationRoute,
  } as any)

const DashboardOrganizationOrganizationIdIndexLazyRoute =
  DashboardOrganizationOrganizationIdIndexLazyImport.update({
    path: '/',
    getParentRoute: () => DashboardOrganizationOrganizationIdRoute,
  } as any).lazy(() =>
    import('./routes/dashboard/organization/$organizationId/index.lazy').then(
      (d) => d.Route,
    ),
  )

const DashboardOrganizationOrganizationIdSettingsIndexLazyRoute =
  DashboardOrganizationOrganizationIdSettingsIndexLazyImport.update({
    path: '/settings/',
    getParentRoute: () => DashboardOrganizationOrganizationIdRoute,
  } as any).lazy(() =>
    import(
      './routes/dashboard/organization/$organizationId/settings/index.lazy'
    ).then((d) => d.Route),
  )

const DashboardOrganizationOrganizationIdProjectIndexLazyRoute =
  DashboardOrganizationOrganizationIdProjectIndexLazyImport.update({
    path: '/project/',
    getParentRoute: () => DashboardOrganizationOrganizationIdRoute,
  } as any).lazy(() =>
    import(
      './routes/dashboard/organization/$organizationId/project/index.lazy'
    ).then((d) => d.Route),
  )

const DashboardOrganizationOrganizationIdPaymentIndexLazyRoute =
  DashboardOrganizationOrganizationIdPaymentIndexLazyImport.update({
    path: '/payment/',
    getParentRoute: () => DashboardOrganizationOrganizationIdRoute,
  } as any).lazy(() =>
    import(
      './routes/dashboard/organization/$organizationId/payment/index.lazy'
    ).then((d) => d.Route),
  )

const DashboardOrganizationOrganizationIdModelsIndexLazyRoute =
  DashboardOrganizationOrganizationIdModelsIndexLazyImport.update({
    path: '/models/',
    getParentRoute: () => DashboardOrganizationOrganizationIdRoute,
  } as any).lazy(() =>
    import(
      './routes/dashboard/organization/$organizationId/models/index.lazy'
    ).then((d) => d.Route),
  )

const DashboardOrganizationOrganizationIdMembersIndexLazyRoute =
  DashboardOrganizationOrganizationIdMembersIndexLazyImport.update({
    path: '/members/',
    getParentRoute: () => DashboardOrganizationOrganizationIdRoute,
  } as any).lazy(() =>
    import(
      './routes/dashboard/organization/$organizationId/members/index.lazy'
    ).then((d) => d.Route),
  )

const DashboardOrganizationOrganizationIdInvitationsIndexLazyRoute =
  DashboardOrganizationOrganizationIdInvitationsIndexLazyImport.update({
    path: '/invitations/',
    getParentRoute: () => DashboardOrganizationOrganizationIdRoute,
  } as any).lazy(() =>
    import(
      './routes/dashboard/organization/$organizationId/invitations/index.lazy'
    ).then((d) => d.Route),
  )

const DashboardOrganizationOrganizationIdProjectProjectIdRoute =
  DashboardOrganizationOrganizationIdProjectProjectIdImport.update({
    path: '/project/$projectId',
    getParentRoute: () => DashboardOrganizationOrganizationIdRoute,
  } as any)

const DashboardOrganizationOrganizationIdProjectProjectIdIndexLazyRoute =
  DashboardOrganizationOrganizationIdProjectProjectIdIndexLazyImport.update({
    path: '/',
    getParentRoute: () =>
      DashboardOrganizationOrganizationIdProjectProjectIdRoute,
  } as any).lazy(() =>
    import(
      './routes/dashboard/organization/$organizationId/project/$projectId/index.lazy'
    ).then((d) => d.Route),
  )

const DashboardOrganizationOrganizationIdPaymentSuccessIndexLazyRoute =
  DashboardOrganizationOrganizationIdPaymentSuccessIndexLazyImport.update({
    path: '/payment/success/',
    getParentRoute: () => DashboardOrganizationOrganizationIdRoute,
  } as any).lazy(() =>
    import(
      './routes/dashboard/organization/$organizationId/payment/success/index.lazy'
    ).then((d) => d.Route),
  )

const DashboardOrganizationOrganizationIdPaymentCancelledIndexLazyRoute =
  DashboardOrganizationOrganizationIdPaymentCancelledIndexLazyImport.update({
    path: '/payment/cancelled/',
    getParentRoute: () => DashboardOrganizationOrganizationIdRoute,
  } as any).lazy(() =>
    import(
      './routes/dashboard/organization/$organizationId/payment/cancelled/index.lazy'
    ).then((d) => d.Route),
  )

const DashboardOrganizationOrganizationIdModelsModelIdIndexLazyRoute =
  DashboardOrganizationOrganizationIdModelsModelIdIndexLazyImport.update({
    path: '/models/$modelId/',
    getParentRoute: () => DashboardOrganizationOrganizationIdRoute,
  } as any).lazy(() =>
    import(
      './routes/dashboard/organization/$organizationId/models/$modelId/index.lazy'
    ).then((d) => d.Route),
  )

const DashboardOrganizationOrganizationIdInvitationsTokenIndexRoute =
  DashboardOrganizationOrganizationIdInvitationsTokenIndexImport.update({
    path: '/invitations/$token/',
    getParentRoute: () => DashboardOrganizationOrganizationIdRoute,
  } as any)

const DashboardOrganizationOrganizationIdProjectProjectIdSettingsIndexLazyRoute =
  DashboardOrganizationOrganizationIdProjectProjectIdSettingsIndexLazyImport.update(
    {
      path: '/settings/',
      getParentRoute: () =>
        DashboardOrganizationOrganizationIdProjectProjectIdRoute,
    } as any,
  ).lazy(() =>
    import(
      './routes/dashboard/organization/$organizationId/project/$projectId/settings/index.lazy'
    ).then((d) => d.Route),
  )

const DashboardOrganizationOrganizationIdProjectProjectIdPromptsIndexLazyRoute =
  DashboardOrganizationOrganizationIdProjectProjectIdPromptsIndexLazyImport.update(
    {
      path: '/prompts/',
      getParentRoute: () =>
        DashboardOrganizationOrganizationIdProjectProjectIdRoute,
    } as any,
  ).lazy(() =>
    import(
      './routes/dashboard/organization/$organizationId/project/$projectId/prompts/index.lazy'
    ).then((d) => d.Route),
  )

const DashboardOrganizationOrganizationIdProjectProjectIdEnvIndexLazyRoute =
  DashboardOrganizationOrganizationIdProjectProjectIdEnvIndexLazyImport.update({
    path: '/env/',
    getParentRoute: () =>
      DashboardOrganizationOrganizationIdProjectProjectIdRoute,
  } as any).lazy(() =>
    import(
      './routes/dashboard/organization/$organizationId/project/$projectId/env/index.lazy'
    ).then((d) => d.Route),
  )

const DashboardOrganizationOrganizationIdProjectProjectIdDataSetsIndexLazyRoute =
  DashboardOrganizationOrganizationIdProjectProjectIdDataSetsIndexLazyImport.update(
    {
      path: '/data-sets/',
      getParentRoute: () =>
        DashboardOrganizationOrganizationIdProjectProjectIdRoute,
    } as any,
  ).lazy(() =>
    import(
      './routes/dashboard/organization/$organizationId/project/$projectId/data-sets/index.lazy'
    ).then((d) => d.Route),
  )

const DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdRoute =
  DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdImport.update(
    {
      path: '/env/$environmentId',
      getParentRoute: () =>
        DashboardOrganizationOrganizationIdProjectProjectIdRoute,
    } as any,
  )

const DashboardOrganizationOrganizationIdProjectProjectIdPromptsPromptIdIndexLazyRoute =
  DashboardOrganizationOrganizationIdProjectProjectIdPromptsPromptIdIndexLazyImport.update(
    {
      path: '/prompts/$promptId/',
      getParentRoute: () =>
        DashboardOrganizationOrganizationIdProjectProjectIdRoute,
    } as any,
  ).lazy(() =>
    import(
      './routes/dashboard/organization/$organizationId/project/$projectId/prompts/$promptId/index.lazy'
    ).then((d) => d.Route),
  )

const DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdIndexLazyRoute =
  DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdIndexLazyImport.update(
    {
      path: '/',
      getParentRoute: () =>
        DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdRoute,
    } as any,
  ).lazy(() =>
    import(
      './routes/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/index.lazy'
    ).then((d) => d.Route),
  )

const DashboardOrganizationOrganizationIdProjectProjectIdDataSetsDataSetIdIndexLazyRoute =
  DashboardOrganizationOrganizationIdProjectProjectIdDataSetsDataSetIdIndexLazyImport.update(
    {
      path: '/data-sets/$dataSetId/',
      getParentRoute: () =>
        DashboardOrganizationOrganizationIdProjectProjectIdRoute,
    } as any,
  ).lazy(() =>
    import(
      './routes/dashboard/organization/$organizationId/project/$projectId/data-sets/$dataSetId/index.lazy'
    ).then((d) => d.Route),
  )

const DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdUsersIndexLazyRoute =
  DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdUsersIndexLazyImport.update(
    {
      path: '/users/',
      getParentRoute: () =>
        DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdRoute,
    } as any,
  ).lazy(() =>
    import(
      './routes/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/users/index.lazy'
    ).then((d) => d.Route),
  )

const DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdTasksIndexLazyRoute =
  DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdTasksIndexLazyImport.update(
    {
      path: '/tasks/',
      getParentRoute: () =>
        DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdRoute,
    } as any,
  ).lazy(() =>
    import(
      './routes/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/tasks/index.lazy'
    ).then((d) => d.Route),
  )

const DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdSettingsIndexLazyRoute =
  DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdSettingsIndexLazyImport.update(
    {
      path: '/settings/',
      getParentRoute: () =>
        DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdRoute,
    } as any,
  ).lazy(() =>
    import(
      './routes/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/settings/index.lazy'
    ).then((d) => d.Route),
  )

const DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdPluginsIndexLazyRoute =
  DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdPluginsIndexLazyImport.update(
    {
      path: '/plugins/',
      getParentRoute: () =>
        DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdRoute,
    } as any,
  ).lazy(() =>
    import(
      './routes/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/plugins/index.lazy'
    ).then((d) => d.Route),
  )

const DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdLogsIndexRoute =
  DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdLogsIndexImport.update(
    {
      path: '/logs/',
      getParentRoute: () =>
        DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdRoute,
    } as any,
  )

const DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdUsersUserIdIndexLazyRoute =
  DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdUsersUserIdIndexLazyImport.update(
    {
      path: '/users/$userId/',
      getParentRoute: () =>
        DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdRoute,
    } as any,
  ).lazy(() =>
    import(
      './routes/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/users/$userId/index.lazy'
    ).then((d) => d.Route),
  )

const DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdTasksTaskIdIndexLazyRoute =
  DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdTasksTaskIdIndexLazyImport.update(
    {
      path: '/tasks/$taskId/',
      getParentRoute: () =>
        DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdRoute,
    } as any,
  ).lazy(() =>
    import(
      './routes/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/tasks/$taskId/index.lazy'
    ).then((d) => d.Route),
  )

const DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdSessionsSessionIdIndexLazyRoute =
  DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdSessionsSessionIdIndexLazyImport.update(
    {
      path: '/sessions/$sessionId/',
      getParentRoute: () =>
        DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdRoute,
    } as any,
  ).lazy(() =>
    import(
      './routes/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/sessions/$sessionId/index.lazy'
    ).then((d) => d.Route),
  )

const DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdLogsActionIdIndexLazyRoute =
  DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdLogsActionIdIndexLazyImport.update(
    {
      path: '/logs/$actionId/',
      getParentRoute: () =>
        DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdRoute,
    } as any,
  ).lazy(() =>
    import(
      './routes/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/logs/$actionId/index.lazy'
    ).then((d) => d.Route),
  )

const DashboardOrganizationOrganizationIdProjectProjectIdDataSetsDataSetIdChecksDataCheckIdIndexLazyRoute =
  DashboardOrganizationOrganizationIdProjectProjectIdDataSetsDataSetIdChecksDataCheckIdIndexLazyImport.update(
    {
      path: '/data-sets/$dataSetId/checks/$dataCheckId/',
      getParentRoute: () =>
        DashboardOrganizationOrganizationIdProjectProjectIdRoute,
    } as any,
  ).lazy(() =>
    import(
      './routes/dashboard/organization/$organizationId/project/$projectId/data-sets/$dataSetId/checks/$dataCheckId/index.lazy'
    ).then((d) => d.Route),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/organization': {
      id: '/dashboard/organization'
      path: '/organization'
      fullPath: '/dashboard/organization'
      preLoaderRoute: typeof DashboardOrganizationImport
      parentRoute: typeof DashboardImport
    }
    '/auth/callback': {
      id: '/auth/callback'
      path: '/auth/callback'
      fullPath: '/auth/callback'
      preLoaderRoute: typeof AuthCallbackLazyImport
      parentRoute: typeof rootRoute
    }
    '/auth/': {
      id: '/auth/'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthIndexImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/organization/$organizationId': {
      id: '/dashboard/organization/$organizationId'
      path: '/$organizationId'
      fullPath: '/dashboard/organization/$organizationId'
      preLoaderRoute: typeof DashboardOrganizationOrganizationIdImport
      parentRoute: typeof DashboardOrganizationImport
    }
    '/dashboard/organization/': {
      id: '/dashboard/organization/'
      path: '/'
      fullPath: '/dashboard/organization/'
      preLoaderRoute: typeof DashboardOrganizationIndexLazyImport
      parentRoute: typeof DashboardOrganizationImport
    }
    '/dashboard/organization/$organizationId/': {
      id: '/dashboard/organization/$organizationId/'
      path: '/'
      fullPath: '/dashboard/organization/$organizationId/'
      preLoaderRoute: typeof DashboardOrganizationOrganizationIdIndexLazyImport
      parentRoute: typeof DashboardOrganizationOrganizationIdImport
    }
    '/dashboard/organization/$organizationId/project/$projectId': {
      id: '/dashboard/organization/$organizationId/project/$projectId'
      path: '/project/$projectId'
      fullPath: '/dashboard/organization/$organizationId/project/$projectId'
      preLoaderRoute: typeof DashboardOrganizationOrganizationIdProjectProjectIdImport
      parentRoute: typeof DashboardOrganizationOrganizationIdImport
    }
    '/dashboard/organization/$organizationId/invitations/': {
      id: '/dashboard/organization/$organizationId/invitations/'
      path: '/invitations'
      fullPath: '/dashboard/organization/$organizationId/invitations'
      preLoaderRoute: typeof DashboardOrganizationOrganizationIdInvitationsIndexLazyImport
      parentRoute: typeof DashboardOrganizationOrganizationIdImport
    }
    '/dashboard/organization/$organizationId/members/': {
      id: '/dashboard/organization/$organizationId/members/'
      path: '/members'
      fullPath: '/dashboard/organization/$organizationId/members'
      preLoaderRoute: typeof DashboardOrganizationOrganizationIdMembersIndexLazyImport
      parentRoute: typeof DashboardOrganizationOrganizationIdImport
    }
    '/dashboard/organization/$organizationId/models/': {
      id: '/dashboard/organization/$organizationId/models/'
      path: '/models'
      fullPath: '/dashboard/organization/$organizationId/models'
      preLoaderRoute: typeof DashboardOrganizationOrganizationIdModelsIndexLazyImport
      parentRoute: typeof DashboardOrganizationOrganizationIdImport
    }
    '/dashboard/organization/$organizationId/payment/': {
      id: '/dashboard/organization/$organizationId/payment/'
      path: '/payment'
      fullPath: '/dashboard/organization/$organizationId/payment'
      preLoaderRoute: typeof DashboardOrganizationOrganizationIdPaymentIndexLazyImport
      parentRoute: typeof DashboardOrganizationOrganizationIdImport
    }
    '/dashboard/organization/$organizationId/project/': {
      id: '/dashboard/organization/$organizationId/project/'
      path: '/project'
      fullPath: '/dashboard/organization/$organizationId/project'
      preLoaderRoute: typeof DashboardOrganizationOrganizationIdProjectIndexLazyImport
      parentRoute: typeof DashboardOrganizationOrganizationIdImport
    }
    '/dashboard/organization/$organizationId/settings/': {
      id: '/dashboard/organization/$organizationId/settings/'
      path: '/settings'
      fullPath: '/dashboard/organization/$organizationId/settings'
      preLoaderRoute: typeof DashboardOrganizationOrganizationIdSettingsIndexLazyImport
      parentRoute: typeof DashboardOrganizationOrganizationIdImport
    }
    '/dashboard/organization/$organizationId/invitations/$token/': {
      id: '/dashboard/organization/$organizationId/invitations/$token/'
      path: '/invitations/$token'
      fullPath: '/dashboard/organization/$organizationId/invitations/$token'
      preLoaderRoute: typeof DashboardOrganizationOrganizationIdInvitationsTokenIndexImport
      parentRoute: typeof DashboardOrganizationOrganizationIdImport
    }
    '/dashboard/organization/$organizationId/models/$modelId/': {
      id: '/dashboard/organization/$organizationId/models/$modelId/'
      path: '/models/$modelId'
      fullPath: '/dashboard/organization/$organizationId/models/$modelId'
      preLoaderRoute: typeof DashboardOrganizationOrganizationIdModelsModelIdIndexLazyImport
      parentRoute: typeof DashboardOrganizationOrganizationIdImport
    }
    '/dashboard/organization/$organizationId/payment/cancelled/': {
      id: '/dashboard/organization/$organizationId/payment/cancelled/'
      path: '/payment/cancelled'
      fullPath: '/dashboard/organization/$organizationId/payment/cancelled'
      preLoaderRoute: typeof DashboardOrganizationOrganizationIdPaymentCancelledIndexLazyImport
      parentRoute: typeof DashboardOrganizationOrganizationIdImport
    }
    '/dashboard/organization/$organizationId/payment/success/': {
      id: '/dashboard/organization/$organizationId/payment/success/'
      path: '/payment/success'
      fullPath: '/dashboard/organization/$organizationId/payment/success'
      preLoaderRoute: typeof DashboardOrganizationOrganizationIdPaymentSuccessIndexLazyImport
      parentRoute: typeof DashboardOrganizationOrganizationIdImport
    }
    '/dashboard/organization/$organizationId/project/$projectId/': {
      id: '/dashboard/organization/$organizationId/project/$projectId/'
      path: '/'
      fullPath: '/dashboard/organization/$organizationId/project/$projectId/'
      preLoaderRoute: typeof DashboardOrganizationOrganizationIdProjectProjectIdIndexLazyImport
      parentRoute: typeof DashboardOrganizationOrganizationIdProjectProjectIdImport
    }
    '/dashboard/organization/$organizationId/project/$projectId/env/$environmentId': {
      id: '/dashboard/organization/$organizationId/project/$projectId/env/$environmentId'
      path: '/env/$environmentId'
      fullPath: '/dashboard/organization/$organizationId/project/$projectId/env/$environmentId'
      preLoaderRoute: typeof DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdImport
      parentRoute: typeof DashboardOrganizationOrganizationIdProjectProjectIdImport
    }
    '/dashboard/organization/$organizationId/project/$projectId/data-sets/': {
      id: '/dashboard/organization/$organizationId/project/$projectId/data-sets/'
      path: '/data-sets'
      fullPath: '/dashboard/organization/$organizationId/project/$projectId/data-sets'
      preLoaderRoute: typeof DashboardOrganizationOrganizationIdProjectProjectIdDataSetsIndexLazyImport
      parentRoute: typeof DashboardOrganizationOrganizationIdProjectProjectIdImport
    }
    '/dashboard/organization/$organizationId/project/$projectId/env/': {
      id: '/dashboard/organization/$organizationId/project/$projectId/env/'
      path: '/env'
      fullPath: '/dashboard/organization/$organizationId/project/$projectId/env'
      preLoaderRoute: typeof DashboardOrganizationOrganizationIdProjectProjectIdEnvIndexLazyImport
      parentRoute: typeof DashboardOrganizationOrganizationIdProjectProjectIdImport
    }
    '/dashboard/organization/$organizationId/project/$projectId/prompts/': {
      id: '/dashboard/organization/$organizationId/project/$projectId/prompts/'
      path: '/prompts'
      fullPath: '/dashboard/organization/$organizationId/project/$projectId/prompts'
      preLoaderRoute: typeof DashboardOrganizationOrganizationIdProjectProjectIdPromptsIndexLazyImport
      parentRoute: typeof DashboardOrganizationOrganizationIdProjectProjectIdImport
    }
    '/dashboard/organization/$organizationId/project/$projectId/settings/': {
      id: '/dashboard/organization/$organizationId/project/$projectId/settings/'
      path: '/settings'
      fullPath: '/dashboard/organization/$organizationId/project/$projectId/settings'
      preLoaderRoute: typeof DashboardOrganizationOrganizationIdProjectProjectIdSettingsIndexLazyImport
      parentRoute: typeof DashboardOrganizationOrganizationIdProjectProjectIdImport
    }
    '/dashboard/organization/$organizationId/project/$projectId/data-sets/$dataSetId/': {
      id: '/dashboard/organization/$organizationId/project/$projectId/data-sets/$dataSetId/'
      path: '/data-sets/$dataSetId'
      fullPath: '/dashboard/organization/$organizationId/project/$projectId/data-sets/$dataSetId'
      preLoaderRoute: typeof DashboardOrganizationOrganizationIdProjectProjectIdDataSetsDataSetIdIndexLazyImport
      parentRoute: typeof DashboardOrganizationOrganizationIdProjectProjectIdImport
    }
    '/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/': {
      id: '/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/'
      path: '/'
      fullPath: '/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/'
      preLoaderRoute: typeof DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdIndexLazyImport
      parentRoute: typeof DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdImport
    }
    '/dashboard/organization/$organizationId/project/$projectId/prompts/$promptId/': {
      id: '/dashboard/organization/$organizationId/project/$projectId/prompts/$promptId/'
      path: '/prompts/$promptId'
      fullPath: '/dashboard/organization/$organizationId/project/$projectId/prompts/$promptId'
      preLoaderRoute: typeof DashboardOrganizationOrganizationIdProjectProjectIdPromptsPromptIdIndexLazyImport
      parentRoute: typeof DashboardOrganizationOrganizationIdProjectProjectIdImport
    }
    '/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/logs/': {
      id: '/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/logs/'
      path: '/logs'
      fullPath: '/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/logs'
      preLoaderRoute: typeof DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdLogsIndexImport
      parentRoute: typeof DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdImport
    }
    '/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/plugins/': {
      id: '/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/plugins/'
      path: '/plugins'
      fullPath: '/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/plugins'
      preLoaderRoute: typeof DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdPluginsIndexLazyImport
      parentRoute: typeof DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdImport
    }
    '/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/settings/': {
      id: '/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/settings/'
      path: '/settings'
      fullPath: '/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/settings'
      preLoaderRoute: typeof DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdSettingsIndexLazyImport
      parentRoute: typeof DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdImport
    }
    '/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/tasks/': {
      id: '/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/tasks/'
      path: '/tasks'
      fullPath: '/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/tasks'
      preLoaderRoute: typeof DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdTasksIndexLazyImport
      parentRoute: typeof DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdImport
    }
    '/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/users/': {
      id: '/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/users/'
      path: '/users'
      fullPath: '/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/users'
      preLoaderRoute: typeof DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdUsersIndexLazyImport
      parentRoute: typeof DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdImport
    }
    '/dashboard/organization/$organizationId/project/$projectId/data-sets/$dataSetId/checks/$dataCheckId/': {
      id: '/dashboard/organization/$organizationId/project/$projectId/data-sets/$dataSetId/checks/$dataCheckId/'
      path: '/data-sets/$dataSetId/checks/$dataCheckId'
      fullPath: '/dashboard/organization/$organizationId/project/$projectId/data-sets/$dataSetId/checks/$dataCheckId'
      preLoaderRoute: typeof DashboardOrganizationOrganizationIdProjectProjectIdDataSetsDataSetIdChecksDataCheckIdIndexLazyImport
      parentRoute: typeof DashboardOrganizationOrganizationIdProjectProjectIdImport
    }
    '/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/logs/$actionId/': {
      id: '/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/logs/$actionId/'
      path: '/logs/$actionId'
      fullPath: '/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/logs/$actionId'
      preLoaderRoute: typeof DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdLogsActionIdIndexLazyImport
      parentRoute: typeof DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdImport
    }
    '/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/sessions/$sessionId/': {
      id: '/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/sessions/$sessionId/'
      path: '/sessions/$sessionId'
      fullPath: '/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/sessions/$sessionId'
      preLoaderRoute: typeof DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdSessionsSessionIdIndexLazyImport
      parentRoute: typeof DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdImport
    }
    '/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/tasks/$taskId/': {
      id: '/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/tasks/$taskId/'
      path: '/tasks/$taskId'
      fullPath: '/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/tasks/$taskId'
      preLoaderRoute: typeof DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdTasksTaskIdIndexLazyImport
      parentRoute: typeof DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdImport
    }
    '/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/users/$userId/': {
      id: '/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/users/$userId/'
      path: '/users/$userId'
      fullPath: '/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/users/$userId'
      preLoaderRoute: typeof DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdUsersUserIdIndexLazyImport
      parentRoute: typeof DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexRoute,
  DashboardRoute: DashboardRoute.addChildren({
    DashboardOrganizationRoute: DashboardOrganizationRoute.addChildren({
      DashboardOrganizationOrganizationIdRoute:
        DashboardOrganizationOrganizationIdRoute.addChildren({
          DashboardOrganizationOrganizationIdIndexLazyRoute,
          DashboardOrganizationOrganizationIdProjectProjectIdRoute:
            DashboardOrganizationOrganizationIdProjectProjectIdRoute.addChildren(
              {
                DashboardOrganizationOrganizationIdProjectProjectIdIndexLazyRoute,
                DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdRoute:
                  DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdRoute.addChildren(
                    {
                      DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdIndexLazyRoute,
                      DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdLogsIndexRoute,
                      DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdPluginsIndexLazyRoute,
                      DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdSettingsIndexLazyRoute,
                      DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdTasksIndexLazyRoute,
                      DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdUsersIndexLazyRoute,
                      DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdLogsActionIdIndexLazyRoute,
                      DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdSessionsSessionIdIndexLazyRoute,
                      DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdTasksTaskIdIndexLazyRoute,
                      DashboardOrganizationOrganizationIdProjectProjectIdEnvEnvironmentIdUsersUserIdIndexLazyRoute,
                    },
                  ),
                DashboardOrganizationOrganizationIdProjectProjectIdDataSetsIndexLazyRoute,
                DashboardOrganizationOrganizationIdProjectProjectIdEnvIndexLazyRoute,
                DashboardOrganizationOrganizationIdProjectProjectIdPromptsIndexLazyRoute,
                DashboardOrganizationOrganizationIdProjectProjectIdSettingsIndexLazyRoute,
                DashboardOrganizationOrganizationIdProjectProjectIdDataSetsDataSetIdIndexLazyRoute,
                DashboardOrganizationOrganizationIdProjectProjectIdPromptsPromptIdIndexLazyRoute,
                DashboardOrganizationOrganizationIdProjectProjectIdDataSetsDataSetIdChecksDataCheckIdIndexLazyRoute,
              },
            ),
          DashboardOrganizationOrganizationIdInvitationsIndexLazyRoute,
          DashboardOrganizationOrganizationIdMembersIndexLazyRoute,
          DashboardOrganizationOrganizationIdModelsIndexLazyRoute,
          DashboardOrganizationOrganizationIdPaymentIndexLazyRoute,
          DashboardOrganizationOrganizationIdProjectIndexLazyRoute,
          DashboardOrganizationOrganizationIdSettingsIndexLazyRoute,
          DashboardOrganizationOrganizationIdInvitationsTokenIndexRoute,
          DashboardOrganizationOrganizationIdModelsModelIdIndexLazyRoute,
          DashboardOrganizationOrganizationIdPaymentCancelledIndexLazyRoute,
          DashboardOrganizationOrganizationIdPaymentSuccessIndexLazyRoute,
        }),
      DashboardOrganizationIndexLazyRoute,
    }),
    DashboardIndexRoute,
  }),
  AuthCallbackLazyRoute,
  AuthIndexRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/dashboard",
        "/auth/callback",
        "/auth/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard.tsx",
      "children": [
        "/dashboard/organization",
        "/dashboard/"
      ]
    },
    "/dashboard/organization": {
      "filePath": "dashboard/organization.tsx",
      "parent": "/dashboard",
      "children": [
        "/dashboard/organization/$organizationId",
        "/dashboard/organization/"
      ]
    },
    "/auth/callback": {
      "filePath": "auth/callback.lazy.tsx"
    },
    "/auth/": {
      "filePath": "auth/index.tsx"
    },
    "/dashboard/": {
      "filePath": "dashboard/index.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/organization/$organizationId": {
      "filePath": "dashboard/organization/$organizationId.tsx",
      "parent": "/dashboard/organization",
      "children": [
        "/dashboard/organization/$organizationId/",
        "/dashboard/organization/$organizationId/project/$projectId",
        "/dashboard/organization/$organizationId/invitations/",
        "/dashboard/organization/$organizationId/members/",
        "/dashboard/organization/$organizationId/models/",
        "/dashboard/organization/$organizationId/payment/",
        "/dashboard/organization/$organizationId/project/",
        "/dashboard/organization/$organizationId/settings/",
        "/dashboard/organization/$organizationId/invitations/$token/",
        "/dashboard/organization/$organizationId/models/$modelId/",
        "/dashboard/organization/$organizationId/payment/cancelled/",
        "/dashboard/organization/$organizationId/payment/success/"
      ]
    },
    "/dashboard/organization/": {
      "filePath": "dashboard/organization/index.lazy.tsx",
      "parent": "/dashboard/organization"
    },
    "/dashboard/organization/$organizationId/": {
      "filePath": "dashboard/organization/$organizationId/index.lazy.tsx",
      "parent": "/dashboard/organization/$organizationId"
    },
    "/dashboard/organization/$organizationId/project/$projectId": {
      "filePath": "dashboard/organization/$organizationId/project/$projectId.tsx",
      "parent": "/dashboard/organization/$organizationId",
      "children": [
        "/dashboard/organization/$organizationId/project/$projectId/",
        "/dashboard/organization/$organizationId/project/$projectId/env/$environmentId",
        "/dashboard/organization/$organizationId/project/$projectId/data-sets/",
        "/dashboard/organization/$organizationId/project/$projectId/env/",
        "/dashboard/organization/$organizationId/project/$projectId/prompts/",
        "/dashboard/organization/$organizationId/project/$projectId/settings/",
        "/dashboard/organization/$organizationId/project/$projectId/data-sets/$dataSetId/",
        "/dashboard/organization/$organizationId/project/$projectId/prompts/$promptId/",
        "/dashboard/organization/$organizationId/project/$projectId/data-sets/$dataSetId/checks/$dataCheckId/"
      ]
    },
    "/dashboard/organization/$organizationId/invitations/": {
      "filePath": "dashboard/organization/$organizationId/invitations/index.lazy.tsx",
      "parent": "/dashboard/organization/$organizationId"
    },
    "/dashboard/organization/$organizationId/members/": {
      "filePath": "dashboard/organization/$organizationId/members/index.lazy.tsx",
      "parent": "/dashboard/organization/$organizationId"
    },
    "/dashboard/organization/$organizationId/models/": {
      "filePath": "dashboard/organization/$organizationId/models/index.lazy.tsx",
      "parent": "/dashboard/organization/$organizationId"
    },
    "/dashboard/organization/$organizationId/payment/": {
      "filePath": "dashboard/organization/$organizationId/payment/index.lazy.tsx",
      "parent": "/dashboard/organization/$organizationId"
    },
    "/dashboard/organization/$organizationId/project/": {
      "filePath": "dashboard/organization/$organizationId/project/index.lazy.tsx",
      "parent": "/dashboard/organization/$organizationId"
    },
    "/dashboard/organization/$organizationId/settings/": {
      "filePath": "dashboard/organization/$organizationId/settings/index.lazy.tsx",
      "parent": "/dashboard/organization/$organizationId"
    },
    "/dashboard/organization/$organizationId/invitations/$token/": {
      "filePath": "dashboard/organization/$organizationId/invitations/$token/index.tsx",
      "parent": "/dashboard/organization/$organizationId"
    },
    "/dashboard/organization/$organizationId/models/$modelId/": {
      "filePath": "dashboard/organization/$organizationId/models/$modelId/index.lazy.tsx",
      "parent": "/dashboard/organization/$organizationId"
    },
    "/dashboard/organization/$organizationId/payment/cancelled/": {
      "filePath": "dashboard/organization/$organizationId/payment/cancelled/index.lazy.tsx",
      "parent": "/dashboard/organization/$organizationId"
    },
    "/dashboard/organization/$organizationId/payment/success/": {
      "filePath": "dashboard/organization/$organizationId/payment/success/index.lazy.tsx",
      "parent": "/dashboard/organization/$organizationId"
    },
    "/dashboard/organization/$organizationId/project/$projectId/": {
      "filePath": "dashboard/organization/$organizationId/project/$projectId/index.lazy.tsx",
      "parent": "/dashboard/organization/$organizationId/project/$projectId"
    },
    "/dashboard/organization/$organizationId/project/$projectId/env/$environmentId": {
      "filePath": "dashboard/organization/$organizationId/project/$projectId/env/$environmentId.tsx",
      "parent": "/dashboard/organization/$organizationId/project/$projectId",
      "children": [
        "/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/",
        "/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/logs/",
        "/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/plugins/",
        "/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/settings/",
        "/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/tasks/",
        "/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/users/",
        "/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/logs/$actionId/",
        "/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/sessions/$sessionId/",
        "/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/tasks/$taskId/",
        "/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/users/$userId/"
      ]
    },
    "/dashboard/organization/$organizationId/project/$projectId/data-sets/": {
      "filePath": "dashboard/organization/$organizationId/project/$projectId/data-sets/index.lazy.tsx",
      "parent": "/dashboard/organization/$organizationId/project/$projectId"
    },
    "/dashboard/organization/$organizationId/project/$projectId/env/": {
      "filePath": "dashboard/organization/$organizationId/project/$projectId/env/index.lazy.tsx",
      "parent": "/dashboard/organization/$organizationId/project/$projectId"
    },
    "/dashboard/organization/$organizationId/project/$projectId/prompts/": {
      "filePath": "dashboard/organization/$organizationId/project/$projectId/prompts/index.lazy.tsx",
      "parent": "/dashboard/organization/$organizationId/project/$projectId"
    },
    "/dashboard/organization/$organizationId/project/$projectId/settings/": {
      "filePath": "dashboard/organization/$organizationId/project/$projectId/settings/index.lazy.tsx",
      "parent": "/dashboard/organization/$organizationId/project/$projectId"
    },
    "/dashboard/organization/$organizationId/project/$projectId/data-sets/$dataSetId/": {
      "filePath": "dashboard/organization/$organizationId/project/$projectId/data-sets/$dataSetId/index.lazy.tsx",
      "parent": "/dashboard/organization/$organizationId/project/$projectId"
    },
    "/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/": {
      "filePath": "dashboard/organization/$organizationId/project/$projectId/env/$environmentId/index.lazy.tsx",
      "parent": "/dashboard/organization/$organizationId/project/$projectId/env/$environmentId"
    },
    "/dashboard/organization/$organizationId/project/$projectId/prompts/$promptId/": {
      "filePath": "dashboard/organization/$organizationId/project/$projectId/prompts/$promptId/index.lazy.tsx",
      "parent": "/dashboard/organization/$organizationId/project/$projectId"
    },
    "/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/logs/": {
      "filePath": "dashboard/organization/$organizationId/project/$projectId/env/$environmentId/logs/index.tsx",
      "parent": "/dashboard/organization/$organizationId/project/$projectId/env/$environmentId"
    },
    "/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/plugins/": {
      "filePath": "dashboard/organization/$organizationId/project/$projectId/env/$environmentId/plugins/index.lazy.tsx",
      "parent": "/dashboard/organization/$organizationId/project/$projectId/env/$environmentId"
    },
    "/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/settings/": {
      "filePath": "dashboard/organization/$organizationId/project/$projectId/env/$environmentId/settings/index.lazy.tsx",
      "parent": "/dashboard/organization/$organizationId/project/$projectId/env/$environmentId"
    },
    "/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/tasks/": {
      "filePath": "dashboard/organization/$organizationId/project/$projectId/env/$environmentId/tasks/index.lazy.tsx",
      "parent": "/dashboard/organization/$organizationId/project/$projectId/env/$environmentId"
    },
    "/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/users/": {
      "filePath": "dashboard/organization/$organizationId/project/$projectId/env/$environmentId/users/index.lazy.tsx",
      "parent": "/dashboard/organization/$organizationId/project/$projectId/env/$environmentId"
    },
    "/dashboard/organization/$organizationId/project/$projectId/data-sets/$dataSetId/checks/$dataCheckId/": {
      "filePath": "dashboard/organization/$organizationId/project/$projectId/data-sets/$dataSetId/checks/$dataCheckId/index.lazy.tsx",
      "parent": "/dashboard/organization/$organizationId/project/$projectId"
    },
    "/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/logs/$actionId/": {
      "filePath": "dashboard/organization/$organizationId/project/$projectId/env/$environmentId/logs/$actionId/index.lazy.tsx",
      "parent": "/dashboard/organization/$organizationId/project/$projectId/env/$environmentId"
    },
    "/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/sessions/$sessionId/": {
      "filePath": "dashboard/organization/$organizationId/project/$projectId/env/$environmentId/sessions/$sessionId/index.lazy.tsx",
      "parent": "/dashboard/organization/$organizationId/project/$projectId/env/$environmentId"
    },
    "/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/tasks/$taskId/": {
      "filePath": "dashboard/organization/$organizationId/project/$projectId/env/$environmentId/tasks/$taskId/index.lazy.tsx",
      "parent": "/dashboard/organization/$organizationId/project/$projectId/env/$environmentId"
    },
    "/dashboard/organization/$organizationId/project/$projectId/env/$environmentId/users/$userId/": {
      "filePath": "dashboard/organization/$organizationId/project/$projectId/env/$environmentId/users/$userId/index.lazy.tsx",
      "parent": "/dashboard/organization/$organizationId/project/$projectId/env/$environmentId"
    }
  }
}
ROUTE_MANIFEST_END */
